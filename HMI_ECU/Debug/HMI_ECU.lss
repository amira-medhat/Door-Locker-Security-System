
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000400c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  0000400c  000040a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800102  00800102  00004142  2**0
                  ALLOC
  3 .stab         0000342c  00000000  00000000  00004144  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001404  00000000  00000000  00007570  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a86d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c508  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d0c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 31       	cpi	r26, 0x10	; 16
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 95 07 	call	0xf2a	; 0xf2a <main>
      8a:	0c 94 04 20 	jmp	0x4008	; 0x4008 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 88 1f 	jmp	0x3f10	; 0x3f10 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ee       	ldi	r26, 0xEB	; 235
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 88 1f 	jmp	0x3f10	; 0x3f10 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ee       	ldi	r24, 0xEB	; 235
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_CallBack>:
unsigned char flag; /* to check if the password is correct */
volatile uint8 timer_counts = 0;
unsigned char first_pass_flag = 0; // Due to proteus error

void Timer1_CallBack(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	timer_counts++;
     b4e:	80 91 09 01 	lds	r24, 0x0109
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 09 01 	sts	0x0109, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Modules_init>:

void Modules_init(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	6a 97       	sbiw	r28, 0x1a	; 26
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     b72:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <LCD_init>
	LCD_displayString("**Welcome**");
     b76:	80 e6       	ldi	r24, 0x60	; 96
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	aa e7       	ldi	r26, 0x7A	; 122
     b84:	b4 e4       	ldi	r27, 0x44	; 68
     b86:	8b 87       	std	Y+11, r24	; 0x0b
     b88:	9c 87       	std	Y+12, r25	; 0x0c
     b8a:	ad 87       	std	Y+13, r26	; 0x0d
     b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b90:	7c 85       	ldd	r23, Y+12	; 0x0c
     b92:	8d 85       	ldd	r24, Y+13	; 0x0d
     b94:	9e 85       	ldd	r25, Y+14	; 0x0e
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4a ef       	ldi	r20, 0xFA	; 250
     b9c:	54 e4       	ldi	r21, 0x44	; 68
     b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba2:	dc 01       	movw	r26, r24
     ba4:	cb 01       	movw	r24, r22
     ba6:	8f 83       	std	Y+7, r24	; 0x07
     ba8:	98 87       	std	Y+8, r25	; 0x08
     baa:	a9 87       	std	Y+9, r26	; 0x09
     bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bae:	6f 81       	ldd	r22, Y+7	; 0x07
     bb0:	78 85       	ldd	r23, Y+8	; 0x08
     bb2:	89 85       	ldd	r24, Y+9	; 0x09
     bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e8       	ldi	r20, 0x80	; 128
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc2:	88 23       	and	r24, r24
     bc4:	2c f4       	brge	.+10     	; 0xbd0 <Modules_init+0x72>
		__ticks = 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	3f c0       	rjmp	.+126    	; 0xc4e <Modules_init+0xf0>
	else if (__tmp > 65535)
     bd0:	6f 81       	ldd	r22, Y+7	; 0x07
     bd2:	78 85       	ldd	r23, Y+8	; 0x08
     bd4:	89 85       	ldd	r24, Y+9	; 0x09
     bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	4f e7       	ldi	r20, 0x7F	; 127
     bde:	57 e4       	ldi	r21, 0x47	; 71
     be0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be4:	18 16       	cp	r1, r24
     be6:	4c f5       	brge	.+82     	; 0xc3a <Modules_init+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bea:	7c 85       	ldd	r23, Y+12	; 0x0c
     bec:	8d 85       	ldd	r24, Y+13	; 0x0d
     bee:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e2       	ldi	r20, 0x20	; 32
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	bc 01       	movw	r22, r24
     c02:	cd 01       	movw	r24, r26
     c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
     c10:	0f c0       	rjmp	.+30     	; 0xc30 <Modules_init+0xd2>
     c12:	88 ec       	ldi	r24, 0xC8	; 200
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	9c 81       	ldd	r25, Y+4	; 0x04
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <Modules_init+0xc0>
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c26:	8d 81       	ldd	r24, Y+5	; 0x05
     c28:	9e 81       	ldd	r25, Y+6	; 0x06
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	9e 83       	std	Y+6, r25	; 0x06
     c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	69 f7       	brne	.-38     	; 0xc12 <Modules_init+0xb4>
     c38:	14 c0       	rjmp	.+40     	; 0xc62 <Modules_init+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3a:	6f 81       	ldd	r22, Y+7	; 0x07
     c3c:	78 85       	ldd	r23, Y+8	; 0x08
     c3e:	89 85       	ldd	r24, Y+9	; 0x09
     c40:	9a 85       	ldd	r25, Y+10	; 0x0a
     c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	9a 81       	ldd	r25, Y+2	; 0x02
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <Modules_init+0xfc>
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	UART_ConfigType UART_state = {_8_bit_data, disabled, _1_bit, std_baudrate_1};
     c62:	ce 01       	movw	r24, r28
     c64:	0f 96       	adiw	r24, 0x0f	; 15
     c66:	9f 8b       	std	Y+23, r25	; 0x17
     c68:	8e 8b       	std	Y+22, r24	; 0x16
     c6a:	e4 ef       	ldi	r30, 0xF4	; 244
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	f9 8f       	std	Y+25, r31	; 0x19
     c70:	e8 8f       	std	Y+24, r30	; 0x18
     c72:	f7 e0       	ldi	r31, 0x07	; 7
     c74:	fa 8f       	std	Y+26, r31	; 0x1a
     c76:	e8 8d       	ldd	r30, Y+24	; 0x18
     c78:	f9 8d       	ldd	r31, Y+25	; 0x19
     c7a:	00 80       	ld	r0, Z
     c7c:	88 8d       	ldd	r24, Y+24	; 0x18
     c7e:	99 8d       	ldd	r25, Y+25	; 0x19
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	99 8f       	std	Y+25, r25	; 0x19
     c84:	88 8f       	std	Y+24, r24	; 0x18
     c86:	ee 89       	ldd	r30, Y+22	; 0x16
     c88:	ff 89       	ldd	r31, Y+23	; 0x17
     c8a:	00 82       	st	Z, r0
     c8c:	8e 89       	ldd	r24, Y+22	; 0x16
     c8e:	9f 89       	ldd	r25, Y+23	; 0x17
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	9f 8b       	std	Y+23, r25	; 0x17
     c94:	8e 8b       	std	Y+22, r24	; 0x16
     c96:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c98:	91 50       	subi	r25, 0x01	; 1
     c9a:	9a 8f       	std	Y+26, r25	; 0x1a
     c9c:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c9e:	ee 23       	and	r30, r30
     ca0:	51 f7       	brne	.-44     	; 0xc76 <Modules_init+0x118>
	UART_init(&UART_state);
     ca2:	ce 01       	movw	r24, r28
     ca4:	0f 96       	adiw	r24, 0x0f	; 15
     ca6:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <UART_init>
	SREG |= (1<<7);
     caa:	af e5       	ldi	r26, 0x5F	; 95
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ef e5       	ldi	r30, 0x5F	; 95
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 68       	ori	r24, 0x80	; 128
     cb6:	8c 93       	st	X, r24
}
     cb8:	6a 96       	adiw	r28, 0x1a	; 26
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <Timer_init>:

void Timer_init(void)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	2b 97       	sbiw	r28, 0x0b	; 11
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType Timer_state = {0, 23437, CLK_1024, CTC}; //to calculate 3 sec
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	98 87       	std	Y+8, r25	; 0x08
     ce4:	8f 83       	std	Y+7, r24	; 0x07
     ce6:	eb ef       	ldi	r30, 0xFB	; 251
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	fa 87       	std	Y+10, r31	; 0x0a
     cec:	e9 87       	std	Y+9, r30	; 0x09
     cee:	f6 e0       	ldi	r31, 0x06	; 6
     cf0:	fb 87       	std	Y+11, r31	; 0x0b
     cf2:	e9 85       	ldd	r30, Y+9	; 0x09
     cf4:	fa 85       	ldd	r31, Y+10	; 0x0a
     cf6:	00 80       	ld	r0, Z
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	9a 87       	std	Y+10, r25	; 0x0a
     d00:	89 87       	std	Y+9, r24	; 0x09
     d02:	ef 81       	ldd	r30, Y+7	; 0x07
     d04:	f8 85       	ldd	r31, Y+8	; 0x08
     d06:	00 82       	st	Z, r0
     d08:	8f 81       	ldd	r24, Y+7	; 0x07
     d0a:	98 85       	ldd	r25, Y+8	; 0x08
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	98 87       	std	Y+8, r25	; 0x08
     d10:	8f 83       	std	Y+7, r24	; 0x07
     d12:	9b 85       	ldd	r25, Y+11	; 0x0b
     d14:	91 50       	subi	r25, 0x01	; 1
     d16:	9b 87       	std	Y+11, r25	; 0x0b
     d18:	eb 85       	ldd	r30, Y+11	; 0x0b
     d1a:	ee 23       	and	r30, r30
     d1c:	51 f7       	brne	.-44     	; 0xcf2 <Timer_init+0x28>
	Timer1_init(&Timer_state);
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <Timer1_init>
	Timer1_setCallBack(Timer1_CallBack);
     d26:	83 ea       	ldi	r24, 0xA3	; 163
     d28:	95 e0       	ldi	r25, 0x05	; 5
     d2a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <Timer1_setCallBack>
}
     d2e:	2b 96       	adiw	r28, 0x0b	; 11
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <Get_Password>:

void Get_Password(uint16 *password)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	66 97       	sbiw	r28, 0x16	; 22
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	9c 8b       	std	Y+20, r25	; 0x14
     d56:	8b 8b       	std	Y+19, r24	; 0x13
	*password = 0;
     d58:	eb 89       	ldd	r30, Y+19	; 0x13
     d5a:	fc 89       	ldd	r31, Y+20	; 0x14
     d5c:	11 82       	std	Z+1, r1	; 0x01
     d5e:	10 82       	st	Z, r1
	int r;
	if (visits == 1 && first_pass_flag == 0)     // Due to an error in proteus
     d60:	80 91 f3 00 	lds	r24, 0x00F3
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	49 f4       	brne	.+18     	; 0xd7a <Get_Password+0x3a>
     d68:	80 91 0a 01 	lds	r24, 0x010A
     d6c:	88 23       	and	r24, r24
     d6e:	29 f4       	brne	.+10     	; 0xd7a <Get_Password+0x3a>
		r = 5;
     d70:	85 e0       	ldi	r24, 0x05	; 5
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9a 8b       	std	Y+18, r25	; 0x12
     d76:	89 8b       	std	Y+17, r24	; 0x11
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <Get_Password+0x42>
	else
		r = 6;
     d7a:	86 e0       	ldi	r24, 0x06	; 6
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9a 8b       	std	Y+18, r25	; 0x12
     d80:	89 8b       	std	Y+17, r24	; 0x11
	for (int i = 0; i < r ; i++)
     d82:	18 8a       	std	Y+16, r1	; 0x10
     d84:	1f 86       	std	Y+15, r1	; 0x0f
     d86:	a7 c0       	rjmp	.+334    	; 0xed6 <Get_Password+0x196>
	{
		while (KEYPAD_getPressedKey() == -1){}
     d88:	0e 94 cd 12 	call	0x259a	; 0x259a <KEYPAD_getPressedKey>
		key = KEYPAD_getPressedKey();
     d8c:	0e 94 cd 12 	call	0x259a	; 0x259a <KEYPAD_getPressedKey>
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	90 93 0f 01 	sts	0x010F, r25
     d98:	80 93 0e 01 	sts	0x010E, r24
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	aa ef       	ldi	r26, 0xFA	; 250
     da2:	b3 e4       	ldi	r27, 0x43	; 67
     da4:	8b 87       	std	Y+11, r24	; 0x0b
     da6:	9c 87       	std	Y+12, r25	; 0x0c
     da8:	ad 87       	std	Y+13, r26	; 0x0d
     daa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dac:	6b 85       	ldd	r22, Y+11	; 0x0b
     dae:	7c 85       	ldd	r23, Y+12	; 0x0c
     db0:	8d 85       	ldd	r24, Y+13	; 0x0d
     db2:	9e 85       	ldd	r25, Y+14	; 0x0e
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a ef       	ldi	r20, 0xFA	; 250
     dba:	54 e4       	ldi	r21, 0x44	; 68
     dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	8f 83       	std	Y+7, r24	; 0x07
     dc6:	98 87       	std	Y+8, r25	; 0x08
     dc8:	a9 87       	std	Y+9, r26	; 0x09
     dca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dcc:	6f 81       	ldd	r22, Y+7	; 0x07
     dce:	78 85       	ldd	r23, Y+8	; 0x08
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e8       	ldi	r20, 0x80	; 128
     dda:	5f e3       	ldi	r21, 0x3F	; 63
     ddc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de0:	88 23       	and	r24, r24
     de2:	2c f4       	brge	.+10     	; 0xdee <Get_Password+0xae>
		__ticks = 1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9e 83       	std	Y+6, r25	; 0x06
     dea:	8d 83       	std	Y+5, r24	; 0x05
     dec:	3f c0       	rjmp	.+126    	; 0xe6c <Get_Password+0x12c>
	else if (__tmp > 65535)
     dee:	6f 81       	ldd	r22, Y+7	; 0x07
     df0:	78 85       	ldd	r23, Y+8	; 0x08
     df2:	89 85       	ldd	r24, Y+9	; 0x09
     df4:	9a 85       	ldd	r25, Y+10	; 0x0a
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	3f ef       	ldi	r19, 0xFF	; 255
     dfa:	4f e7       	ldi	r20, 0x7F	; 127
     dfc:	57 e4       	ldi	r21, 0x47	; 71
     dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e02:	18 16       	cp	r1, r24
     e04:	4c f5       	brge	.+82     	; 0xe58 <Get_Password+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e06:	6b 85       	ldd	r22, Y+11	; 0x0b
     e08:	7c 85       	ldd	r23, Y+12	; 0x0c
     e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e2       	ldi	r20, 0x20	; 32
     e14:	51 e4       	ldi	r21, 0x41	; 65
     e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	9e 83       	std	Y+6, r25	; 0x06
     e2c:	8d 83       	std	Y+5, r24	; 0x05
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <Get_Password+0x10e>
     e30:	88 ec       	ldi	r24, 0xC8	; 200
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	9c 83       	std	Y+4, r25	; 0x04
     e36:	8b 83       	std	Y+3, r24	; 0x03
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <Get_Password+0xfc>
     e40:	9c 83       	std	Y+4, r25	; 0x04
     e42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e44:	8d 81       	ldd	r24, Y+5	; 0x05
     e46:	9e 81       	ldd	r25, Y+6	; 0x06
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	9e 83       	std	Y+6, r25	; 0x06
     e4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	69 f7       	brne	.-38     	; 0xe30 <Get_Password+0xf0>
     e56:	14 c0       	rjmp	.+40     	; 0xe80 <Get_Password+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e58:	6f 81       	ldd	r22, Y+7	; 0x07
     e5a:	78 85       	ldd	r23, Y+8	; 0x08
     e5c:	89 85       	ldd	r24, Y+9	; 0x09
     e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	9a 83       	std	Y+2, r25	; 0x02
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <Get_Password+0x138>
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if((key <= 9) && (key >= 0))
     e80:	80 91 0e 01 	lds	r24, 0x010E
     e84:	90 91 0f 01 	lds	r25, 0x010F
     e88:	8a 30       	cpi	r24, 0x0A	; 10
     e8a:	91 05       	cpc	r25, r1
     e8c:	f8 f4       	brcc	.+62     	; 0xecc <Get_Password+0x18c>
     e8e:	80 91 0e 01 	lds	r24, 0x010E
     e92:	90 91 0f 01 	lds	r25, 0x010F
		{
			LCD_displayCharacter('*');
     e96:	8a e2       	ldi	r24, 0x2A	; 42
     e98:	0e 94 27 19 	call	0x324e	; 0x324e <LCD_displayCharacter>
			*password = key + ((*password) * 10);
     e9c:	eb 89       	ldd	r30, Y+19	; 0x13
     e9e:	fc 89       	ldd	r31, Y+20	; 0x14
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	9c 01       	movw	r18, r24
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	c9 01       	movw	r24, r18
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	28 0f       	add	r18, r24
     eb6:	39 1f       	adc	r19, r25
     eb8:	80 91 0e 01 	lds	r24, 0x010E
     ebc:	90 91 0f 01 	lds	r25, 0x010F
     ec0:	82 0f       	add	r24, r18
     ec2:	93 1f       	adc	r25, r19
     ec4:	eb 89       	ldd	r30, Y+19	; 0x13
     ec6:	fc 89       	ldd	r31, Y+20	; 0x14
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24
	int r;
	if (visits == 1 && first_pass_flag == 0)     // Due to an error in proteus
		r = 5;
	else
		r = 6;
	for (int i = 0; i < r ; i++)
     ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ece:	98 89       	ldd	r25, Y+16	; 0x10
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	98 8b       	std	Y+16, r25	; 0x10
     ed4:	8f 87       	std	Y+15, r24	; 0x0f
     ed6:	2f 85       	ldd	r18, Y+15	; 0x0f
     ed8:	38 89       	ldd	r19, Y+16	; 0x10
     eda:	89 89       	ldd	r24, Y+17	; 0x11
     edc:	9a 89       	ldd	r25, Y+18	; 0x12
     ede:	28 17       	cp	r18, r24
     ee0:	39 07       	cpc	r19, r25
     ee2:	0c f4       	brge	.+2      	; 0xee6 <Get_Password+0x1a6>
     ee4:	51 cf       	rjmp	.-350    	; 0xd88 <Get_Password+0x48>
		{
			LCD_displayCharacter('*');
			*password = key + ((*password) * 10);
		}
	}
	first_pass_flag = 1;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 0a 01 	sts	0x010A, r24
}
     eec:	66 96       	adiw	r28, 0x16	; 22
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <Send_Password>:

void Send_Password(uint16 password)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <Send_Password+0x6>
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(MC1_READY);
     f0c:	8f e1       	ldi	r24, 0x1F	; 31
     f0e:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <UART_sendByte>
	while(UART_recieveByte() != MC2_READY){}
     f12:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <UART_recieveByte>
     f16:	80 31       	cpi	r24, 0x10	; 16
     f18:	e1 f7       	brne	.-8      	; 0xf12 <Send_Password+0x14>
	UART_sendByte(password);
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <UART_sendByte>
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <main>:


int main(void)
{
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	c1 58       	subi	r28, 0x81	; 129
     f38:	d0 40       	sbci	r29, 0x00	; 0
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
	uint8 menu_option;
	Modules_init();
     f44:	0e 94 af 05 	call	0xb5e	; 0xb5e <Modules_init>
	while(1)
	{
		switch(visits)
     f48:	80 91 f3 00 	lds	r24, 0x00F3
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	c0 58       	subi	r28, 0x80	; 128
     f52:	df 4f       	sbci	r29, 0xFF	; 255
     f54:	39 83       	std	Y+1, r19	; 0x01
     f56:	28 83       	st	Y, r18
     f58:	c0 58       	subi	r28, 0x80	; 128
     f5a:	d0 40       	sbci	r29, 0x00	; 0
     f5c:	c0 58       	subi	r28, 0x80	; 128
     f5e:	df 4f       	sbci	r29, 0xFF	; 255
     f60:	88 81       	ld	r24, Y
     f62:	99 81       	ldd	r25, Y+1	; 0x01
     f64:	c0 58       	subi	r28, 0x80	; 128
     f66:	d0 40       	sbci	r29, 0x00	; 0
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	91 05       	cpc	r25, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <main+0x46>
     f6e:	ea c3       	rjmp	.+2004   	; 0x1744 <main+0x81a>
     f70:	c0 58       	subi	r28, 0x80	; 128
     f72:	df 4f       	sbci	r29, 0xFF	; 255
     f74:	e8 81       	ld	r30, Y
     f76:	f9 81       	ldd	r31, Y+1	; 0x01
     f78:	c0 58       	subi	r28, 0x80	; 128
     f7a:	d0 40       	sbci	r29, 0x00	; 0
     f7c:	e4 30       	cpi	r30, 0x04	; 4
     f7e:	f1 05       	cpc	r31, r1
     f80:	a4 f4       	brge	.+40     	; 0xfaa <main+0x80>
     f82:	c0 58       	subi	r28, 0x80	; 128
     f84:	df 4f       	sbci	r29, 0xFF	; 255
     f86:	28 81       	ld	r18, Y
     f88:	39 81       	ldd	r19, Y+1	; 0x01
     f8a:	c0 58       	subi	r28, 0x80	; 128
     f8c:	d0 40       	sbci	r29, 0x00	; 0
     f8e:	21 30       	cpi	r18, 0x01	; 1
     f90:	31 05       	cpc	r19, r1
     f92:	51 f1       	breq	.+84     	; 0xfe8 <main+0xbe>
     f94:	c0 58       	subi	r28, 0x80	; 128
     f96:	df 4f       	sbci	r29, 0xFF	; 255
     f98:	88 81       	ld	r24, Y
     f9a:	99 81       	ldd	r25, Y+1	; 0x01
     f9c:	c0 58       	subi	r28, 0x80	; 128
     f9e:	d0 40       	sbci	r29, 0x00	; 0
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <main+0x7e>
     fa6:	a4 c1       	rjmp	.+840    	; 0x12f0 <main+0x3c6>
     fa8:	cf cf       	rjmp	.-98     	; 0xf48 <main+0x1e>
     faa:	c0 58       	subi	r28, 0x80	; 128
     fac:	df 4f       	sbci	r29, 0xFF	; 255
     fae:	e8 81       	ld	r30, Y
     fb0:	f9 81       	ldd	r31, Y+1	; 0x01
     fb2:	c0 58       	subi	r28, 0x80	; 128
     fb4:	d0 40       	sbci	r29, 0x00	; 0
     fb6:	e5 30       	cpi	r30, 0x05	; 5
     fb8:	f1 05       	cpc	r31, r1
     fba:	09 f4       	brne	.+2      	; 0xfbe <main+0x94>
     fbc:	ae c5       	rjmp	.+2908   	; 0x1b1a <main+0xbf0>
     fbe:	c0 58       	subi	r28, 0x80	; 128
     fc0:	df 4f       	sbci	r29, 0xFF	; 255
     fc2:	28 81       	ld	r18, Y
     fc4:	39 81       	ldd	r19, Y+1	; 0x01
     fc6:	c0 58       	subi	r28, 0x80	; 128
     fc8:	d0 40       	sbci	r29, 0x00	; 0
     fca:	25 30       	cpi	r18, 0x05	; 5
     fcc:	31 05       	cpc	r19, r1
     fce:	0c f4       	brge	.+2      	; 0xfd2 <main+0xa8>
     fd0:	f4 c3       	rjmp	.+2024   	; 0x17ba <main+0x890>
     fd2:	c0 58       	subi	r28, 0x80	; 128
     fd4:	df 4f       	sbci	r29, 0xFF	; 255
     fd6:	88 81       	ld	r24, Y
     fd8:	99 81       	ldd	r25, Y+1	; 0x01
     fda:	c0 58       	subi	r28, 0x80	; 128
     fdc:	d0 40       	sbci	r29, 0x00	; 0
     fde:	86 30       	cpi	r24, 0x06	; 6
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <main+0xbc>
     fe4:	da c5       	rjmp	.+2996   	; 0x1b9a <main+0xc70>
     fe6:	b0 cf       	rjmp	.-160    	; 0xf48 <main+0x1e>
		{
		case 1:

			LCD_clearScreen();
     fe8:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
			LCD_displayString("Plz Enter Pass:");
     fec:	8c e6       	ldi	r24, 0x6C	; 108
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
			LCD_moveCursor(1,0);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			Get_Password(&password_1);
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 a0 06 	call	0xd40	; 0xd40 <Get_Password>
    1004:	fe 01       	movw	r30, r28
    1006:	e5 58       	subi	r30, 0x85	; 133
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	a0 ea       	ldi	r26, 0xA0	; 160
    1010:	b0 e4       	ldi	r27, 0x40	; 64
    1012:	80 83       	st	Z, r24
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	a2 83       	std	Z+2, r26	; 0x02
    1018:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    101a:	8e 01       	movw	r16, r28
    101c:	09 58       	subi	r16, 0x89	; 137
    101e:	1f 4f       	sbci	r17, 0xFF	; 255
    1020:	fe 01       	movw	r30, r28
    1022:	e5 58       	subi	r30, 0x85	; 133
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	60 81       	ld	r22, Z
    1028:	71 81       	ldd	r23, Z+1	; 0x01
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4a ef       	ldi	r20, 0xFA	; 250
    1034:	54 e4       	ldi	r21, 0x44	; 68
    1036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	f8 01       	movw	r30, r16
    1040:	80 83       	st	Z, r24
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	a2 83       	std	Z+2, r26	; 0x02
    1046:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1048:	fe 01       	movw	r30, r28
    104a:	e9 58       	subi	r30, 0x89	; 137
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	60 81       	ld	r22, Z
    1050:	71 81       	ldd	r23, Z+1	; 0x01
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e8       	ldi	r20, 0x80	; 128
    105c:	5f e3       	ldi	r21, 0x3F	; 63
    105e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1062:	88 23       	and	r24, r24
    1064:	44 f4       	brge	.+16     	; 0x1076 <main+0x14c>
		__ticks = 1;
    1066:	fe 01       	movw	r30, r28
    1068:	eb 58       	subi	r30, 0x8B	; 139
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
    1074:	64 c0       	rjmp	.+200    	; 0x113e <main+0x214>
	else if (__tmp > 65535)
    1076:	fe 01       	movw	r30, r28
    1078:	e9 58       	subi	r30, 0x89	; 137
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	57 e4       	ldi	r21, 0x47	; 71
    108c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	0c f0       	brlt	.+2      	; 0x1096 <main+0x16c>
    1094:	43 c0       	rjmp	.+134    	; 0x111c <main+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1096:	fe 01       	movw	r30, r28
    1098:	e5 58       	subi	r30, 0x85	; 133
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	82 81       	ldd	r24, Z+2	; 0x02
    10a2:	93 81       	ldd	r25, Z+3	; 0x03
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	8e 01       	movw	r16, r28
    10b6:	0b 58       	subi	r16, 0x8B	; 139
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	bc 01       	movw	r22, r24
    10bc:	cd 01       	movw	r24, r26
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	f8 01       	movw	r30, r16
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	80 83       	st	Z, r24
    10cc:	1f c0       	rjmp	.+62     	; 0x110c <main+0x1e2>
    10ce:	fe 01       	movw	r30, r28
    10d0:	ed 58       	subi	r30, 0x8D	; 141
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	88 ec       	ldi	r24, 0xC8	; 200
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	80 83       	st	Z, r24
    10dc:	fe 01       	movw	r30, r28
    10de:	ed 58       	subi	r30, 0x8D	; 141
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	80 81       	ld	r24, Z
    10e4:	91 81       	ldd	r25, Z+1	; 0x01
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <main+0x1bc>
    10ea:	fe 01       	movw	r30, r28
    10ec:	ed 58       	subi	r30, 0x8D	; 141
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f4:	de 01       	movw	r26, r28
    10f6:	ab 58       	subi	r26, 0x8B	; 139
    10f8:	bf 4f       	sbci	r27, 0xFF	; 255
    10fa:	fe 01       	movw	r30, r28
    10fc:	eb 58       	subi	r30, 0x8B	; 139
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	80 81       	ld	r24, Z
    1102:	91 81       	ldd	r25, Z+1	; 0x01
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	9c 93       	st	X, r25
    110a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110c:	fe 01       	movw	r30, r28
    110e:	eb 58       	subi	r30, 0x8B	; 139
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	d1 f6       	brne	.-76     	; 0x10ce <main+0x1a4>
    111a:	27 c0       	rjmp	.+78     	; 0x116a <main+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111c:	8e 01       	movw	r16, r28
    111e:	0b 58       	subi	r16, 0x8B	; 139
    1120:	1f 4f       	sbci	r17, 0xFF	; 255
    1122:	fe 01       	movw	r30, r28
    1124:	e9 58       	subi	r30, 0x89	; 137
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	f8 01       	movw	r30, r16
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	80 83       	st	Z, r24
    113e:	de 01       	movw	r26, r28
    1140:	af 58       	subi	r26, 0x8F	; 143
    1142:	bf 4f       	sbci	r27, 0xFF	; 255
    1144:	fe 01       	movw	r30, r28
    1146:	eb 58       	subi	r30, 0x8B	; 139
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01
    114e:	8d 93       	st	X+, r24
    1150:	9c 93       	st	X, r25
    1152:	fe 01       	movw	r30, r28
    1154:	ef 58       	subi	r30, 0x8F	; 143
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	80 81       	ld	r24, Z
    115a:	91 81       	ldd	r25, Z+1	; 0x01
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <main+0x232>
    1160:	fe 01       	movw	r30, r28
    1162:	ef 58       	subi	r30, 0x8F	; 143
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
			_delay_ms(5);
			while (KEYPAD_getPressedKey() != '='){}
    116a:	0e 94 cd 12 	call	0x259a	; 0x259a <KEYPAD_getPressedKey>
    116e:	8d 33       	cpi	r24, 0x3D	; 61
    1170:	e1 f7       	brne	.-8      	; 0x116a <main+0x240>
    1172:	fe 01       	movw	r30, r28
    1174:	e3 59       	subi	r30, 0x93	; 147
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a0 ea       	ldi	r26, 0xA0	; 160
    117e:	b0 e4       	ldi	r27, 0x40	; 64
    1180:	80 83       	st	Z, r24
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	a2 83       	std	Z+2, r26	; 0x02
    1186:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1188:	8e 01       	movw	r16, r28
    118a:	07 59       	subi	r16, 0x97	; 151
    118c:	1f 4f       	sbci	r17, 0xFF	; 255
    118e:	fe 01       	movw	r30, r28
    1190:	e3 59       	subi	r30, 0x93	; 147
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	60 81       	ld	r22, Z
    1196:	71 81       	ldd	r23, Z+1	; 0x01
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	93 81       	ldd	r25, Z+3	; 0x03
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4a ef       	ldi	r20, 0xFA	; 250
    11a2:	54 e4       	ldi	r21, 0x44	; 68
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	f8 01       	movw	r30, r16
    11ae:	80 83       	st	Z, r24
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	a2 83       	std	Z+2, r26	; 0x02
    11b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11b6:	fe 01       	movw	r30, r28
    11b8:	e7 59       	subi	r30, 0x97	; 151
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	60 81       	ld	r22, Z
    11be:	71 81       	ldd	r23, Z+1	; 0x01
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
    11c2:	93 81       	ldd	r25, Z+3	; 0x03
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	44 f4       	brge	.+16     	; 0x11e4 <main+0x2ba>
		__ticks = 1;
    11d4:	fe 01       	movw	r30, r28
    11d6:	e9 59       	subi	r30, 0x99	; 153
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	80 83       	st	Z, r24
    11e2:	64 c0       	rjmp	.+200    	; 0x12ac <main+0x382>
	else if (__tmp > 65535)
    11e4:	fe 01       	movw	r30, r28
    11e6:	e7 59       	subi	r30, 0x97	; 151
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	60 81       	ld	r22, Z
    11ec:	71 81       	ldd	r23, Z+1	; 0x01
    11ee:	82 81       	ldd	r24, Z+2	; 0x02
    11f0:	93 81       	ldd	r25, Z+3	; 0x03
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	3f ef       	ldi	r19, 0xFF	; 255
    11f6:	4f e7       	ldi	r20, 0x7F	; 127
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	0c f0       	brlt	.+2      	; 0x1204 <main+0x2da>
    1202:	43 c0       	rjmp	.+134    	; 0x128a <main+0x360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1204:	fe 01       	movw	r30, r28
    1206:	e3 59       	subi	r30, 0x93	; 147
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e2       	ldi	r20, 0x20	; 32
    1218:	51 e4       	ldi	r21, 0x41	; 65
    121a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	8e 01       	movw	r16, r28
    1224:	09 59       	subi	r16, 0x99	; 153
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	f8 01       	movw	r30, r16
    1236:	91 83       	std	Z+1, r25	; 0x01
    1238:	80 83       	st	Z, r24
    123a:	1f c0       	rjmp	.+62     	; 0x127a <main+0x350>
    123c:	fe 01       	movw	r30, r28
    123e:	eb 59       	subi	r30, 0x9B	; 155
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	88 ec       	ldi	r24, 0xC8	; 200
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	80 83       	st	Z, r24
    124a:	fe 01       	movw	r30, r28
    124c:	eb 59       	subi	r30, 0x9B	; 155
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	80 81       	ld	r24, Z
    1252:	91 81       	ldd	r25, Z+1	; 0x01
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <main+0x32a>
    1258:	fe 01       	movw	r30, r28
    125a:	eb 59       	subi	r30, 0x9B	; 155
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	91 83       	std	Z+1, r25	; 0x01
    1260:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1262:	de 01       	movw	r26, r28
    1264:	a9 59       	subi	r26, 0x99	; 153
    1266:	bf 4f       	sbci	r27, 0xFF	; 255
    1268:	fe 01       	movw	r30, r28
    126a:	e9 59       	subi	r30, 0x99	; 153
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	9c 93       	st	X, r25
    1278:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127a:	fe 01       	movw	r30, r28
    127c:	e9 59       	subi	r30, 0x99	; 153
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	80 81       	ld	r24, Z
    1282:	91 81       	ldd	r25, Z+1	; 0x01
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	d1 f6       	brne	.-76     	; 0x123c <main+0x312>
    1288:	27 c0       	rjmp	.+78     	; 0x12d8 <main+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128a:	8e 01       	movw	r16, r28
    128c:	09 59       	subi	r16, 0x99	; 153
    128e:	1f 4f       	sbci	r17, 0xFF	; 255
    1290:	fe 01       	movw	r30, r28
    1292:	e7 59       	subi	r30, 0x97	; 151
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	f8 01       	movw	r30, r16
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	80 83       	st	Z, r24
    12ac:	de 01       	movw	r26, r28
    12ae:	ad 59       	subi	r26, 0x9D	; 157
    12b0:	bf 4f       	sbci	r27, 0xFF	; 255
    12b2:	fe 01       	movw	r30, r28
    12b4:	e9 59       	subi	r30, 0x99	; 153
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	80 81       	ld	r24, Z
    12ba:	91 81       	ldd	r25, Z+1	; 0x01
    12bc:	8d 93       	st	X+, r24
    12be:	9c 93       	st	X, r25
    12c0:	fe 01       	movw	r30, r28
    12c2:	ed 59       	subi	r30, 0x9D	; 157
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	80 81       	ld	r24, Z
    12c8:	91 81       	ldd	r25, Z+1	; 0x01
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <main+0x3a0>
    12ce:	fe 01       	movw	r30, r28
    12d0:	ed 59       	subi	r30, 0x9D	; 157
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	80 83       	st	Z, r24
			_delay_ms(5);
			Send_Password(password_1);
    12d8:	80 91 02 01 	lds	r24, 0x0102
    12dc:	90 91 03 01 	lds	r25, 0x0103
    12e0:	0e 94 7f 07 	call	0xefe	; 0xefe <Send_Password>
			visits++;
    12e4:	80 91 f3 00 	lds	r24, 0x00F3
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	80 93 f3 00 	sts	0x00F3, r24
    12ee:	2c ce       	rjmp	.-936    	; 0xf48 <main+0x1e>
			break;
		case 2:
			LCD_clearScreen();
    12f0:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			LCD_displayString("Plz re-enter:");
    12fc:	8c e7       	ldi	r24, 0x7C	; 124
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
			LCD_moveCursor(1,0);
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			Get_Password(&password_2);
    130c:	84 e0       	ldi	r24, 0x04	; 4
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	0e 94 a0 06 	call	0xd40	; 0xd40 <Get_Password>
    1314:	fe 01       	movw	r30, r28
    1316:	e1 5a       	subi	r30, 0xA1	; 161
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a0 ea       	ldi	r26, 0xA0	; 160
    1320:	b0 e4       	ldi	r27, 0x40	; 64
    1322:	80 83       	st	Z, r24
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	a2 83       	std	Z+2, r26	; 0x02
    1328:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132a:	8e 01       	movw	r16, r28
    132c:	05 5a       	subi	r16, 0xA5	; 165
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	fe 01       	movw	r30, r28
    1332:	e1 5a       	subi	r30, 0xA1	; 161
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	60 81       	ld	r22, Z
    1338:	71 81       	ldd	r23, Z+1	; 0x01
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	4a ef       	ldi	r20, 0xFA	; 250
    1344:	54 e4       	ldi	r21, 0x44	; 68
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	f8 01       	movw	r30, r16
    1350:	80 83       	st	Z, r24
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	a2 83       	std	Z+2, r26	; 0x02
    1356:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1358:	fe 01       	movw	r30, r28
    135a:	e5 5a       	subi	r30, 0xA5	; 165
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	5f e3       	ldi	r21, 0x3F	; 63
    136e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1372:	88 23       	and	r24, r24
    1374:	44 f4       	brge	.+16     	; 0x1386 <main+0x45c>
		__ticks = 1;
    1376:	fe 01       	movw	r30, r28
    1378:	e7 5a       	subi	r30, 0xA7	; 167
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
    1384:	64 c0       	rjmp	.+200    	; 0x144e <main+0x524>
	else if (__tmp > 65535)
    1386:	fe 01       	movw	r30, r28
    1388:	e5 5a       	subi	r30, 0xA5	; 165
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	60 81       	ld	r22, Z
    138e:	71 81       	ldd	r23, Z+1	; 0x01
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	4f e7       	ldi	r20, 0x7F	; 127
    139a:	57 e4       	ldi	r21, 0x47	; 71
    139c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	0c f0       	brlt	.+2      	; 0x13a6 <main+0x47c>
    13a4:	43 c0       	rjmp	.+134    	; 0x142c <main+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a6:	fe 01       	movw	r30, r28
    13a8:	e1 5a       	subi	r30, 0xA1	; 161
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8e 01       	movw	r16, r28
    13c6:	07 5a       	subi	r16, 0xA7	; 167
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	f8 01       	movw	r30, r16
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	80 83       	st	Z, r24
    13dc:	1f c0       	rjmp	.+62     	; 0x141c <main+0x4f2>
    13de:	fe 01       	movw	r30, r28
    13e0:	e9 5a       	subi	r30, 0xA9	; 169
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	88 ec       	ldi	r24, 0xC8	; 200
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
    13ec:	fe 01       	movw	r30, r28
    13ee:	e9 5a       	subi	r30, 0xA9	; 169
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <main+0x4cc>
    13fa:	fe 01       	movw	r30, r28
    13fc:	e9 5a       	subi	r30, 0xA9	; 169
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	de 01       	movw	r26, r28
    1406:	a7 5a       	subi	r26, 0xA7	; 167
    1408:	bf 4f       	sbci	r27, 0xFF	; 255
    140a:	fe 01       	movw	r30, r28
    140c:	e7 5a       	subi	r30, 0xA7	; 167
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	11 96       	adiw	r26, 0x01	; 1
    1418:	9c 93       	st	X, r25
    141a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141c:	fe 01       	movw	r30, r28
    141e:	e7 5a       	subi	r30, 0xA7	; 167
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	d1 f6       	brne	.-76     	; 0x13de <main+0x4b4>
    142a:	27 c0       	rjmp	.+78     	; 0x147a <main+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	8e 01       	movw	r16, r28
    142e:	07 5a       	subi	r16, 0xA7	; 167
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	fe 01       	movw	r30, r28
    1434:	e5 5a       	subi	r30, 0xA5	; 165
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	f8 01       	movw	r30, r16
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
    144e:	de 01       	movw	r26, r28
    1450:	ab 5a       	subi	r26, 0xAB	; 171
    1452:	bf 4f       	sbci	r27, 0xFF	; 255
    1454:	fe 01       	movw	r30, r28
    1456:	e7 5a       	subi	r30, 0xA7	; 167
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	8d 93       	st	X+, r24
    1460:	9c 93       	st	X, r25
    1462:	fe 01       	movw	r30, r28
    1464:	eb 5a       	subi	r30, 0xAB	; 171
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <main+0x542>
    1470:	fe 01       	movw	r30, r28
    1472:	eb 5a       	subi	r30, 0xAB	; 171
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
			_delay_ms(5);
			while (KEYPAD_getPressedKey() != '='){}
    147a:	0e 94 cd 12 	call	0x259a	; 0x259a <KEYPAD_getPressedKey>
    147e:	8d 33       	cpi	r24, 0x3D	; 61
    1480:	e1 f7       	brne	.-8      	; 0x147a <main+0x550>
    1482:	fe 01       	movw	r30, r28
    1484:	ef 5a       	subi	r30, 0xAF	; 175
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 ea       	ldi	r26, 0xA0	; 160
    148e:	b0 e4       	ldi	r27, 0x40	; 64
    1490:	80 83       	st	Z, r24
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	a2 83       	std	Z+2, r26	; 0x02
    1496:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1498:	8e 01       	movw	r16, r28
    149a:	03 5b       	subi	r16, 0xB3	; 179
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	fe 01       	movw	r30, r28
    14a0:	ef 5a       	subi	r30, 0xAF	; 175
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4a ef       	ldi	r20, 0xFA	; 250
    14b2:	54 e4       	ldi	r21, 0x44	; 68
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	f8 01       	movw	r30, r16
    14be:	80 83       	st	Z, r24
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	a2 83       	std	Z+2, r26	; 0x02
    14c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14c6:	fe 01       	movw	r30, r28
    14c8:	e3 5b       	subi	r30, 0xB3	; 179
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	44 f4       	brge	.+16     	; 0x14f4 <main+0x5ca>
		__ticks = 1;
    14e4:	fe 01       	movw	r30, r28
    14e6:	e5 5b       	subi	r30, 0xB5	; 181
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	64 c0       	rjmp	.+200    	; 0x15bc <main+0x692>
	else if (__tmp > 65535)
    14f4:	fe 01       	movw	r30, r28
    14f6:	e3 5b       	subi	r30, 0xB3	; 179
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	0c f0       	brlt	.+2      	; 0x1514 <main+0x5ea>
    1512:	43 c0       	rjmp	.+134    	; 0x159a <main+0x670>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	fe 01       	movw	r30, r28
    1516:	ef 5a       	subi	r30, 0xAF	; 175
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8e 01       	movw	r16, r28
    1534:	05 5b       	subi	r16, 0xB5	; 181
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	f8 01       	movw	r30, r16
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	1f c0       	rjmp	.+62     	; 0x158a <main+0x660>
    154c:	fe 01       	movw	r30, r28
    154e:	e7 5b       	subi	r30, 0xB7	; 183
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	88 ec       	ldi	r24, 0xC8	; 200
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	80 83       	st	Z, r24
    155a:	fe 01       	movw	r30, r28
    155c:	e7 5b       	subi	r30, 0xB7	; 183
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <main+0x63a>
    1568:	fe 01       	movw	r30, r28
    156a:	e7 5b       	subi	r30, 0xB7	; 183
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	de 01       	movw	r26, r28
    1574:	a5 5b       	subi	r26, 0xB5	; 181
    1576:	bf 4f       	sbci	r27, 0xFF	; 255
    1578:	fe 01       	movw	r30, r28
    157a:	e5 5b       	subi	r30, 0xB5	; 181
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	11 96       	adiw	r26, 0x01	; 1
    1586:	9c 93       	st	X, r25
    1588:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158a:	fe 01       	movw	r30, r28
    158c:	e5 5b       	subi	r30, 0xB5	; 181
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	d1 f6       	brne	.-76     	; 0x154c <main+0x622>
    1598:	27 c0       	rjmp	.+78     	; 0x15e8 <main+0x6be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159a:	8e 01       	movw	r16, r28
    159c:	05 5b       	subi	r16, 0xB5	; 181
    159e:	1f 4f       	sbci	r17, 0xFF	; 255
    15a0:	fe 01       	movw	r30, r28
    15a2:	e3 5b       	subi	r30, 0xB3	; 179
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	f8 01       	movw	r30, r16
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
    15bc:	de 01       	movw	r26, r28
    15be:	a9 5b       	subi	r26, 0xB9	; 185
    15c0:	bf 4f       	sbci	r27, 0xFF	; 255
    15c2:	fe 01       	movw	r30, r28
    15c4:	e5 5b       	subi	r30, 0xB5	; 181
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	8d 93       	st	X+, r24
    15ce:	9c 93       	st	X, r25
    15d0:	fe 01       	movw	r30, r28
    15d2:	e9 5b       	subi	r30, 0xB9	; 185
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	80 81       	ld	r24, Z
    15d8:	91 81       	ldd	r25, Z+1	; 0x01
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <main+0x6b0>
    15de:	fe 01       	movw	r30, r28
    15e0:	e9 5b       	subi	r30, 0xB9	; 185
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
			_delay_ms(5);
			Send_Password(password_2);
    15e8:	80 91 04 01 	lds	r24, 0x0104
    15ec:	90 91 05 01 	lds	r25, 0x0105
    15f0:	0e 94 7f 07 	call	0xefe	; 0xefe <Send_Password>
			UART_sendByte(MC1_READY);
    15f4:	8f e1       	ldi	r24, 0x1F	; 31
    15f6:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <UART_sendByte>
			while(UART_recieveByte() != MC2_READY){}
    15fa:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <UART_recieveByte>
    15fe:	80 31       	cpi	r24, 0x10	; 16
    1600:	e1 f7       	brne	.-8      	; 0x15fa <main+0x6d0>
			flag = UART_recieveByte();
    1602:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <UART_recieveByte>
    1606:	80 93 0d 01 	sts	0x010D, r24
			if (flag == 1)
    160a:	80 91 0d 01 	lds	r24, 0x010D
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	31 f4       	brne	.+12     	; 0x161e <main+0x6f4>
			{
				visits++;
    1612:	80 91 f3 00 	lds	r24, 0x00F3
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	80 93 f3 00 	sts	0x00F3, r24
    161c:	95 cc       	rjmp	.-1750   	; 0xf48 <main+0x1e>
			}
			else
			{
				LCD_clearScreen();
    161e:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
				LCD_moveCursor(0,0);
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
				LCD_displayString("**WRONG**");
    162a:	8a e8       	ldi	r24, 0x8A	; 138
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
    1632:	fe 01       	movw	r30, r28
    1634:	ed 5b       	subi	r30, 0xBD	; 189
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	aa ef       	ldi	r26, 0xFA	; 250
    163e:	b3 e4       	ldi	r27, 0x43	; 67
    1640:	80 83       	st	Z, r24
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	a2 83       	std	Z+2, r26	; 0x02
    1646:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1648:	8e 01       	movw	r16, r28
    164a:	01 5c       	subi	r16, 0xC1	; 193
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	fe 01       	movw	r30, r28
    1650:	ed 5b       	subi	r30, 0xBD	; 189
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	60 81       	ld	r22, Z
    1656:	71 81       	ldd	r23, Z+1	; 0x01
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	4a ef       	ldi	r20, 0xFA	; 250
    1662:	54 e4       	ldi	r21, 0x44	; 68
    1664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	f8 01       	movw	r30, r16
    166e:	80 83       	st	Z, r24
    1670:	91 83       	std	Z+1, r25	; 0x01
    1672:	a2 83       	std	Z+2, r26	; 0x02
    1674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1676:	fe 01       	movw	r30, r28
    1678:	ff 96       	adiw	r30, 0x3f	; 63
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    168e:	88 23       	and	r24, r24
    1690:	2c f4       	brge	.+10     	; 0x169c <main+0x772>
		__ticks = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9e af       	std	Y+62, r25	; 0x3e
    1698:	8d af       	std	Y+61, r24	; 0x3d
    169a:	46 c0       	rjmp	.+140    	; 0x1728 <main+0x7fe>
	else if (__tmp > 65535)
    169c:	fe 01       	movw	r30, r28
    169e:	ff 96       	adiw	r30, 0x3f	; 63
    16a0:	60 81       	ld	r22, Z
    16a2:	71 81       	ldd	r23, Z+1	; 0x01
    16a4:	82 81       	ldd	r24, Z+2	; 0x02
    16a6:	93 81       	ldd	r25, Z+3	; 0x03
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	3f ef       	ldi	r19, 0xFF	; 255
    16ac:	4f e7       	ldi	r20, 0x7F	; 127
    16ae:	57 e4       	ldi	r21, 0x47	; 71
    16b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b4:	18 16       	cp	r1, r24
    16b6:	64 f5       	brge	.+88     	; 0x1710 <main+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b8:	fe 01       	movw	r30, r28
    16ba:	ed 5b       	subi	r30, 0xBD	; 189
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e2       	ldi	r20, 0x20	; 32
    16cc:	51 e4       	ldi	r21, 0x41	; 65
    16ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	bc 01       	movw	r22, r24
    16d8:	cd 01       	movw	r24, r26
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	9e af       	std	Y+62, r25	; 0x3e
    16e4:	8d af       	std	Y+61, r24	; 0x3d
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <main+0x7dc>
    16e8:	88 ec       	ldi	r24, 0xC8	; 200
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9c af       	std	Y+60, r25	; 0x3c
    16ee:	8b af       	std	Y+59, r24	; 0x3b
    16f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    16f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <main+0x7ca>
    16f8:	9c af       	std	Y+60, r25	; 0x3c
    16fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    16fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	9e af       	std	Y+62, r25	; 0x3e
    1704:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1706:	8d ad       	ldd	r24, Y+61	; 0x3d
    1708:	9e ad       	ldd	r25, Y+62	; 0x3e
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	69 f7       	brne	.-38     	; 0x16e8 <main+0x7be>
    170e:	16 c0       	rjmp	.+44     	; 0x173c <main+0x812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1710:	fe 01       	movw	r30, r28
    1712:	ff 96       	adiw	r30, 0x3f	; 63
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9e af       	std	Y+62, r25	; 0x3e
    1726:	8d af       	std	Y+61, r24	; 0x3d
    1728:	8d ad       	ldd	r24, Y+61	; 0x3d
    172a:	9e ad       	ldd	r25, Y+62	; 0x3e
    172c:	9a af       	std	Y+58, r25	; 0x3a
    172e:	89 af       	std	Y+57, r24	; 0x39
    1730:	89 ad       	ldd	r24, Y+57	; 0x39
    1732:	9a ad       	ldd	r25, Y+58	; 0x3a
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <main+0x80a>
    1738:	9a af       	std	Y+58, r25	; 0x3a
    173a:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				visits = 1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 f3 00 	sts	0x00F3, r24
    1742:	02 cc       	rjmp	.-2044   	; 0xf48 <main+0x1e>
			}
			break;
		case 3:
			LCD_clearScreen();
    1744:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			LCD_displayString("+ : Open Door");
    1750:	84 e9       	ldi	r24, 0x94	; 148
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
			LCD_moveCursor(1,0);
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
    1760:	82 ea       	ldi	r24, 0xA2	; 162
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
			menu_option = KEYPAD_getPressedKey();
    1768:	0e 94 cd 12 	call	0x259a	; 0x259a <KEYPAD_getPressedKey>
    176c:	fe 01       	movw	r30, r28
    176e:	e1 58       	subi	r30, 0x81	; 129
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	80 83       	st	Z, r24
			if (menu_option == '+' || menu_option == '-')
    1774:	fe 01       	movw	r30, r28
    1776:	e1 58       	subi	r30, 0x81	; 129
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	8b 32       	cpi	r24, 0x2B	; 43
    177e:	31 f0       	breq	.+12     	; 0x178c <main+0x862>
    1780:	fe 01       	movw	r30, r28
    1782:	e1 58       	subi	r30, 0x81	; 129
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	8d 32       	cpi	r24, 0x2D	; 45
    178a:	99 f4       	brne	.+38     	; 0x17b2 <main+0x888>
			{
				UART_sendByte(MC1_READY);
    178c:	8f e1       	ldi	r24, 0x1F	; 31
    178e:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <UART_sendByte>
				while(UART_recieveByte() != MC2_READY){}
    1792:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <UART_recieveByte>
    1796:	80 31       	cpi	r24, 0x10	; 16
    1798:	e1 f7       	brne	.-8      	; 0x1792 <main+0x868>
				UART_sendByte(menu_option);
    179a:	fe 01       	movw	r30, r28
    179c:	e1 58       	subi	r30, 0x81	; 129
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	80 81       	ld	r24, Z
    17a2:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <UART_sendByte>
				visits++;
    17a6:	80 91 f3 00 	lds	r24, 0x00F3
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	80 93 f3 00 	sts	0x00F3, r24
    17b0:	cb cb       	rjmp	.-2154   	; 0xf48 <main+0x1e>
			}
			else
			{
				visits = 3;
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	80 93 f3 00 	sts	0x00F3, r24
    17b8:	c7 cb       	rjmp	.-2162   	; 0xf48 <main+0x1e>
			}
			break;
		case 4:
			LCD_clearScreen();
    17ba:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			LCD_displayString("Plz Enter Pass:");
    17c6:	8c e6       	ldi	r24, 0x6C	; 108
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
			LCD_moveCursor(1,0);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			Get_Password(&password);
    17d6:	86 e0       	ldi	r24, 0x06	; 6
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	0e 94 a0 06 	call	0xd40	; 0xd40 <Get_Password>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a0 ea       	ldi	r26, 0xA0	; 160
    17e4:	b0 e4       	ldi	r27, 0x40	; 64
    17e6:	8d ab       	std	Y+53, r24	; 0x35
    17e8:	9e ab       	std	Y+54, r25	; 0x36
    17ea:	af ab       	std	Y+55, r26	; 0x37
    17ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	6d a9       	ldd	r22, Y+53	; 0x35
    17f0:	7e a9       	ldd	r23, Y+54	; 0x36
    17f2:	8f a9       	ldd	r24, Y+55	; 0x37
    17f4:	98 ad       	ldd	r25, Y+56	; 0x38
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	4a ef       	ldi	r20, 0xFA	; 250
    17fc:	54 e4       	ldi	r21, 0x44	; 68
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	89 ab       	std	Y+49, r24	; 0x31
    1808:	9a ab       	std	Y+50, r25	; 0x32
    180a:	ab ab       	std	Y+51, r26	; 0x33
    180c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    180e:	69 a9       	ldd	r22, Y+49	; 0x31
    1810:	7a a9       	ldd	r23, Y+50	; 0x32
    1812:	8b a9       	ldd	r24, Y+51	; 0x33
    1814:	9c a9       	ldd	r25, Y+52	; 0x34
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1822:	88 23       	and	r24, r24
    1824:	2c f4       	brge	.+10     	; 0x1830 <main+0x906>
		__ticks = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	98 ab       	std	Y+48, r25	; 0x30
    182c:	8f a7       	std	Y+47, r24	; 0x2f
    182e:	3f c0       	rjmp	.+126    	; 0x18ae <main+0x984>
	else if (__tmp > 65535)
    1830:	69 a9       	ldd	r22, Y+49	; 0x31
    1832:	7a a9       	ldd	r23, Y+50	; 0x32
    1834:	8b a9       	ldd	r24, Y+51	; 0x33
    1836:	9c a9       	ldd	r25, Y+52	; 0x34
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	57 e4       	ldi	r21, 0x47	; 71
    1840:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1844:	18 16       	cp	r1, r24
    1846:	4c f5       	brge	.+82     	; 0x189a <main+0x970>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	6d a9       	ldd	r22, Y+53	; 0x35
    184a:	7e a9       	ldd	r23, Y+54	; 0x36
    184c:	8f a9       	ldd	r24, Y+55	; 0x37
    184e:	98 ad       	ldd	r25, Y+56	; 0x38
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	98 ab       	std	Y+48, r25	; 0x30
    186e:	8f a7       	std	Y+47, r24	; 0x2f
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <main+0x966>
    1872:	88 ec       	ldi	r24, 0xC8	; 200
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9e a7       	std	Y+46, r25	; 0x2e
    1878:	8d a7       	std	Y+45, r24	; 0x2d
    187a:	8d a5       	ldd	r24, Y+45	; 0x2d
    187c:	9e a5       	ldd	r25, Y+46	; 0x2e
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <main+0x954>
    1882:	9e a7       	std	Y+46, r25	; 0x2e
    1884:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	8f a5       	ldd	r24, Y+47	; 0x2f
    1888:	98 a9       	ldd	r25, Y+48	; 0x30
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	98 ab       	std	Y+48, r25	; 0x30
    188e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	8f a5       	ldd	r24, Y+47	; 0x2f
    1892:	98 a9       	ldd	r25, Y+48	; 0x30
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	69 f7       	brne	.-38     	; 0x1872 <main+0x948>
    1898:	14 c0       	rjmp	.+40     	; 0x18c2 <main+0x998>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	69 a9       	ldd	r22, Y+49	; 0x31
    189c:	7a a9       	ldd	r23, Y+50	; 0x32
    189e:	8b a9       	ldd	r24, Y+51	; 0x33
    18a0:	9c a9       	ldd	r25, Y+52	; 0x34
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	98 ab       	std	Y+48, r25	; 0x30
    18ac:	8f a7       	std	Y+47, r24	; 0x2f
    18ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b0:	98 a9       	ldd	r25, Y+48	; 0x30
    18b2:	9c a7       	std	Y+44, r25	; 0x2c
    18b4:	8b a7       	std	Y+43, r24	; 0x2b
    18b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <main+0x990>
    18be:	9c a7       	std	Y+44, r25	; 0x2c
    18c0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(5);
			while (KEYPAD_getPressedKey() != '='){}
    18c2:	0e 94 cd 12 	call	0x259a	; 0x259a <KEYPAD_getPressedKey>
    18c6:	8d 33       	cpi	r24, 0x3D	; 61
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <main+0x998>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 ea       	ldi	r26, 0xA0	; 160
    18d0:	b0 e4       	ldi	r27, 0x40	; 64
    18d2:	8f a3       	std	Y+39, r24	; 0x27
    18d4:	98 a7       	std	Y+40, r25	; 0x28
    18d6:	a9 a7       	std	Y+41, r26	; 0x29
    18d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	6f a1       	ldd	r22, Y+39	; 0x27
    18dc:	78 a5       	ldd	r23, Y+40	; 0x28
    18de:	89 a5       	ldd	r24, Y+41	; 0x29
    18e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	8b a3       	std	Y+35, r24	; 0x23
    18f4:	9c a3       	std	Y+36, r25	; 0x24
    18f6:	ad a3       	std	Y+37, r26	; 0x25
    18f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18fa:	6b a1       	ldd	r22, Y+35	; 0x23
    18fc:	7c a1       	ldd	r23, Y+36	; 0x24
    18fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1900:	9e a1       	ldd	r25, Y+38	; 0x26
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e8       	ldi	r20, 0x80	; 128
    1908:	5f e3       	ldi	r21, 0x3F	; 63
    190a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190e:	88 23       	and	r24, r24
    1910:	2c f4       	brge	.+10     	; 0x191c <main+0x9f2>
		__ticks = 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	9a a3       	std	Y+34, r25	; 0x22
    1918:	89 a3       	std	Y+33, r24	; 0x21
    191a:	3f c0       	rjmp	.+126    	; 0x199a <main+0xa70>
	else if (__tmp > 65535)
    191c:	6b a1       	ldd	r22, Y+35	; 0x23
    191e:	7c a1       	ldd	r23, Y+36	; 0x24
    1920:	8d a1       	ldd	r24, Y+37	; 0x25
    1922:	9e a1       	ldd	r25, Y+38	; 0x26
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	3f ef       	ldi	r19, 0xFF	; 255
    1928:	4f e7       	ldi	r20, 0x7F	; 127
    192a:	57 e4       	ldi	r21, 0x47	; 71
    192c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1930:	18 16       	cp	r1, r24
    1932:	4c f5       	brge	.+82     	; 0x1986 <main+0xa5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1934:	6f a1       	ldd	r22, Y+39	; 0x27
    1936:	78 a5       	ldd	r23, Y+40	; 0x28
    1938:	89 a5       	ldd	r24, Y+41	; 0x29
    193a:	9a a5       	ldd	r25, Y+42	; 0x2a
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e2       	ldi	r20, 0x20	; 32
    1942:	51 e4       	ldi	r21, 0x41	; 65
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9a a3       	std	Y+34, r25	; 0x22
    195a:	89 a3       	std	Y+33, r24	; 0x21
    195c:	0f c0       	rjmp	.+30     	; 0x197c <main+0xa52>
    195e:	88 ec       	ldi	r24, 0xC8	; 200
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	98 a3       	std	Y+32, r25	; 0x20
    1964:	8f 8f       	std	Y+31, r24	; 0x1f
    1966:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1968:	98 a1       	ldd	r25, Y+32	; 0x20
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <main+0xa40>
    196e:	98 a3       	std	Y+32, r25	; 0x20
    1970:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1972:	89 a1       	ldd	r24, Y+33	; 0x21
    1974:	9a a1       	ldd	r25, Y+34	; 0x22
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	9a a3       	std	Y+34, r25	; 0x22
    197a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197c:	89 a1       	ldd	r24, Y+33	; 0x21
    197e:	9a a1       	ldd	r25, Y+34	; 0x22
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	69 f7       	brne	.-38     	; 0x195e <main+0xa34>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <main+0xa84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1986:	6b a1       	ldd	r22, Y+35	; 0x23
    1988:	7c a1       	ldd	r23, Y+36	; 0x24
    198a:	8d a1       	ldd	r24, Y+37	; 0x25
    198c:	9e a1       	ldd	r25, Y+38	; 0x26
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9a a3       	std	Y+34, r25	; 0x22
    1998:	89 a3       	std	Y+33, r24	; 0x21
    199a:	89 a1       	ldd	r24, Y+33	; 0x21
    199c:	9a a1       	ldd	r25, Y+34	; 0x22
    199e:	9e 8f       	std	Y+30, r25	; 0x1e
    19a0:	8d 8f       	std	Y+29, r24	; 0x1d
    19a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <main+0xa7c>
    19aa:	9e 8f       	std	Y+30, r25	; 0x1e
    19ac:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5);
			Send_Password(password);
    19ae:	80 91 06 01 	lds	r24, 0x0106
    19b2:	90 91 07 01 	lds	r25, 0x0107
    19b6:	0e 94 7f 07 	call	0xefe	; 0xefe <Send_Password>
			while(UART_recieveByte() != MC2_READY){}
    19ba:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <UART_recieveByte>
    19be:	80 31       	cpi	r24, 0x10	; 16
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <main+0xa90>
			UART_sendByte(MC1_READY);
    19c2:	8f e1       	ldi	r24, 0x1F	; 31
    19c4:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <UART_sendByte>
			flag = UART_recieveByte();
    19c8:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <UART_recieveByte>
    19cc:	80 93 0d 01 	sts	0x010D, r24
			if (flag == 1)
    19d0:	80 91 0d 01 	lds	r24, 0x010D
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	b9 f4       	brne	.+46     	; 0x1a06 <main+0xadc>
			{
				fails = 0;
    19d8:	10 92 08 01 	sts	0x0108, r1
				if (menu_option == '+')
    19dc:	fe 01       	movw	r30, r28
    19de:	e1 58       	subi	r30, 0x81	; 129
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	80 81       	ld	r24, Z
    19e4:	8b 32       	cpi	r24, 0x2B	; 43
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <main+0xac6>
				{
					visits = 5;
    19e8:	85 e0       	ldi	r24, 0x05	; 5
    19ea:	80 93 f3 00 	sts	0x00F3, r24
    19ee:	ac ca       	rjmp	.-2728   	; 0xf48 <main+0x1e>
				}
				else if(menu_option == '-')
    19f0:	fe 01       	movw	r30, r28
    19f2:	e1 58       	subi	r30, 0x81	; 129
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 81       	ld	r24, Z
    19f8:	8d 32       	cpi	r24, 0x2D	; 45
    19fa:	09 f0       	breq	.+2      	; 0x19fe <main+0xad4>
    19fc:	a5 ca       	rjmp	.-2742   	; 0xf48 <main+0x1e>
				{
					visits = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	80 93 f3 00 	sts	0x00F3, r24
    1a04:	a1 ca       	rjmp	.-2750   	; 0xf48 <main+0x1e>
				}
			}
			else
			{
				LCD_clearScreen();
    1a06:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
				LCD_moveCursor(0,0);
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
				LCD_displayString("**WRONG**");
    1a12:	8a e8       	ldi	r24, 0x8A	; 138
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	aa ef       	ldi	r26, 0xFA	; 250
    1a20:	b3 e4       	ldi	r27, 0x43	; 67
    1a22:	89 8f       	std	Y+25, r24	; 0x19
    1a24:	9a 8f       	std	Y+26, r25	; 0x1a
    1a26:	ab 8f       	std	Y+27, r26	; 0x1b
    1a28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a ef       	ldi	r20, 0xFA	; 250
    1a38:	54 e4       	ldi	r21, 0x44	; 68
    1a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	8d 8b       	std	Y+21, r24	; 0x15
    1a44:	9e 8b       	std	Y+22, r25	; 0x16
    1a46:	af 8b       	std	Y+23, r26	; 0x17
    1a48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a50:	98 8d       	ldd	r25, Y+24	; 0x18
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <main+0xb42>
		__ticks = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	3f c0       	rjmp	.+126    	; 0x1aea <main+0xbc0>
	else if (__tmp > 65535)
    1a6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a70:	8f 89       	ldd	r24, Y+23	; 0x17
    1a72:	98 8d       	ldd	r25, Y+24	; 0x18
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	3f ef       	ldi	r19, 0xFF	; 255
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	57 e4       	ldi	r21, 0x47	; 71
    1a7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a80:	18 16       	cp	r1, r24
    1a82:	4c f5       	brge	.+82     	; 0x1ad6 <main+0xbac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a84:	69 8d       	ldd	r22, Y+25	; 0x19
    1a86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9c 8b       	std	Y+20, r25	; 0x14
    1aaa:	8b 8b       	std	Y+19, r24	; 0x13
    1aac:	0f c0       	rjmp	.+30     	; 0x1acc <main+0xba2>
    1aae:	88 ec       	ldi	r24, 0xC8	; 200
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9a 8b       	std	Y+18, r25	; 0x12
    1ab4:	89 8b       	std	Y+17, r24	; 0x11
    1ab6:	89 89       	ldd	r24, Y+17	; 0x11
    1ab8:	9a 89       	ldd	r25, Y+18	; 0x12
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <main+0xb90>
    1abe:	9a 8b       	std	Y+18, r25	; 0x12
    1ac0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	9c 8b       	std	Y+20, r25	; 0x14
    1aca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1acc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ace:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	69 f7       	brne	.-38     	; 0x1aae <main+0xb84>
    1ad4:	14 c0       	rjmp	.+40     	; 0x1afe <main+0xbd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ada:	8f 89       	ldd	r24, Y+23	; 0x17
    1adc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9c 8b       	std	Y+20, r25	; 0x14
    1ae8:	8b 8b       	std	Y+19, r24	; 0x13
    1aea:	8b 89       	ldd	r24, Y+19	; 0x13
    1aec:	9c 89       	ldd	r25, Y+20	; 0x14
    1aee:	98 8b       	std	Y+16, r25	; 0x10
    1af0:	8f 87       	std	Y+15, r24	; 0x0f
    1af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af4:	98 89       	ldd	r25, Y+16	; 0x10
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <main+0xbcc>
    1afa:	98 8b       	std	Y+16, r25	; 0x10
    1afc:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				fails++;
    1afe:	80 91 08 01 	lds	r24, 0x0108
    1b02:	8f 5f       	subi	r24, 0xFF	; 255
    1b04:	80 93 08 01 	sts	0x0108, r24
				if (fails == 3)
    1b08:	80 91 08 01 	lds	r24, 0x0108
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <main+0xbe8>
    1b10:	1b ca       	rjmp	.-3018   	; 0xf48 <main+0x1e>
				{
					visits = 6;
    1b12:	86 e0       	ldi	r24, 0x06	; 6
    1b14:	80 93 f3 00 	sts	0x00F3, r24
    1b18:	17 ca       	rjmp	.-3026   	; 0xf48 <main+0x1e>
				}
			}
			break;
		case 5:
			LCD_clearScreen();
    1b1a:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			Timer_init();
    1b26:	0e 94 65 06 	call	0xcca	; 0xcca <Timer_init>
			LCD_displayString("Door is Unlocking");
    1b2a:	82 eb       	ldi	r24, 0xB2	; 178
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
			while(timer_counts < 5){}
    1b32:	80 91 09 01 	lds	r24, 0x0109
    1b36:	85 30       	cpi	r24, 0x05	; 5
    1b38:	e0 f3       	brcs	.-8      	; 0x1b32 <main+0xc08>
			Timer1_deInit();
    1b3a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Timer1_deInit>
			timer_counts = 0;
    1b3e:	10 92 09 01 	sts	0x0109, r1
			LCD_clearScreen();
    1b42:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			Timer_init();
    1b4e:	0e 94 65 06 	call	0xcca	; 0xcca <Timer_init>
			LCD_displayString("Door is Open");
    1b52:	84 ec       	ldi	r24, 0xC4	; 196
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
			while(timer_counts < 1){} // to hold the door for 3 sec
    1b5a:	80 91 09 01 	lds	r24, 0x0109
    1b5e:	88 23       	and	r24, r24
    1b60:	e1 f3       	breq	.-8      	; 0x1b5a <main+0xc30>
			Timer1_deInit();
    1b62:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Timer1_deInit>
			timer_counts = 0;
    1b66:	10 92 09 01 	sts	0x0109, r1
			LCD_clearScreen();
    1b6a:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			Timer_init();
    1b76:	0e 94 65 06 	call	0xcca	; 0xcca <Timer_init>
			LCD_displayString("Door is Locking");
    1b7a:	81 ed       	ldi	r24, 0xD1	; 209
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
			while(timer_counts < 5){}
    1b82:	80 91 09 01 	lds	r24, 0x0109
    1b86:	85 30       	cpi	r24, 0x05	; 5
    1b88:	e0 f3       	brcs	.-8      	; 0x1b82 <main+0xc58>
			Timer1_deInit();
    1b8a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Timer1_deInit>
			timer_counts = 0;
    1b8e:	10 92 09 01 	sts	0x0109, r1
			visits = 3;
    1b92:	83 e0       	ldi	r24, 0x03	; 3
    1b94:	80 93 f3 00 	sts	0x00F3, r24
    1b98:	d7 c9       	rjmp	.-3154   	; 0xf48 <main+0x1e>
			break;
		case 6:
			LCD_clearScreen();
    1b9a:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
			LCD_displayString("**ERROR**");
    1ba6:	81 ee       	ldi	r24, 0xE1	; 225
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	aa e7       	ldi	r26, 0x7A	; 122
    1bb4:	b4 e4       	ldi	r27, 0x44	; 68
    1bb6:	8b 87       	std	Y+11, r24	; 0x0b
    1bb8:	9c 87       	std	Y+12, r25	; 0x0c
    1bba:	ad 87       	std	Y+13, r26	; 0x0d
    1bbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a ef       	ldi	r20, 0xFA	; 250
    1bcc:	54 e4       	ldi	r21, 0x44	; 68
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8f 83       	std	Y+7, r24	; 0x07
    1bd8:	98 87       	std	Y+8, r25	; 0x08
    1bda:	a9 87       	std	Y+9, r26	; 0x09
    1bdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bde:	6f 81       	ldd	r22, Y+7	; 0x07
    1be0:	78 85       	ldd	r23, Y+8	; 0x08
    1be2:	89 85       	ldd	r24, Y+9	; 0x09
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <main+0xcd6>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	3f c0       	rjmp	.+126    	; 0x1c7e <main+0xd54>
	else if (__tmp > 65535)
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	3f ef       	ldi	r19, 0xFF	; 255
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	57 e4       	ldi	r21, 0x47	; 71
    1c10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	4c f5       	brge	.+82     	; 0x1c6a <main+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <main+0xd36>
    1c42:	88 ec       	ldi	r24, 0xC8	; 200
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9c 83       	std	Y+4, r25	; 0x04
    1c48:	8b 83       	std	Y+3, r24	; 0x03
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <main+0xd24>
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	9e 83       	std	Y+6, r25	; 0x06
    1c5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f7       	brne	.-38     	; 0x1c42 <main+0xd18>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <main+0xd68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	9a 83       	std	Y+2, r25	; 0x02
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <main+0xd60>
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearScreen();
    1c92:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <LCD_clearScreen>
			visits = 3;
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	80 93 f3 00 	sts	0x00F3, r24
    1c9c:	55 c9       	rjmp	.-3414   	; 0xf48 <main+0x1e>

00001c9e <__vector_7>:
/*******************************************************************************
 *                              ISR                                    *
 *******************************************************************************/
/*ISR FOR COMPORE MODE  */
ISR(TIMER1_COMPA_vect)
{
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	2f 93       	push	r18
    1caa:	3f 93       	push	r19
    1cac:	4f 93       	push	r20
    1cae:	5f 93       	push	r21
    1cb0:	6f 93       	push	r22
    1cb2:	7f 93       	push	r23
    1cb4:	8f 93       	push	r24
    1cb6:	9f 93       	push	r25
    1cb8:	af 93       	push	r26
    1cba:	bf 93       	push	r27
    1cbc:	ef 93       	push	r30
    1cbe:	ff 93       	push	r31
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1cc8:	80 91 0b 01 	lds	r24, 0x010B
    1ccc:	90 91 0c 01 	lds	r25, 0x010C
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	29 f0       	breq	.+10     	; 0x1cde <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    1cd4:	e0 91 0b 01 	lds	r30, 0x010B
    1cd8:	f0 91 0c 01 	lds	r31, 0x010C
    1cdc:	09 95       	icall
	}
}
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	ff 91       	pop	r31
    1ce4:	ef 91       	pop	r30
    1ce6:	bf 91       	pop	r27
    1ce8:	af 91       	pop	r26
    1cea:	9f 91       	pop	r25
    1cec:	8f 91       	pop	r24
    1cee:	7f 91       	pop	r23
    1cf0:	6f 91       	pop	r22
    1cf2:	5f 91       	pop	r21
    1cf4:	4f 91       	pop	r20
    1cf6:	3f 91       	pop	r19
    1cf8:	2f 91       	pop	r18
    1cfa:	0f 90       	pop	r0
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	0f 90       	pop	r0
    1d00:	1f 90       	pop	r1
    1d02:	18 95       	reti

00001d04 <__vector_9>:

/*ISR FOR OVERFLOW MODE  */
ISR(TIMER1_OVF_vect)
{
    1d04:	1f 92       	push	r1
    1d06:	0f 92       	push	r0
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	0f 92       	push	r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	2f 93       	push	r18
    1d10:	3f 93       	push	r19
    1d12:	4f 93       	push	r20
    1d14:	5f 93       	push	r21
    1d16:	6f 93       	push	r22
    1d18:	7f 93       	push	r23
    1d1a:	8f 93       	push	r24
    1d1c:	9f 93       	push	r25
    1d1e:	af 93       	push	r26
    1d20:	bf 93       	push	r27
    1d22:	ef 93       	push	r30
    1d24:	ff 93       	push	r31
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1d2e:	80 91 0b 01 	lds	r24, 0x010B
    1d32:	90 91 0c 01 	lds	r25, 0x010C
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	29 f0       	breq	.+10     	; 0x1d44 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1d3a:	e0 91 0b 01 	lds	r30, 0x010B
    1d3e:	f0 91 0c 01 	lds	r31, 0x010C
    1d42:	09 95       	icall
	}

}
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	ff 91       	pop	r31
    1d4a:	ef 91       	pop	r30
    1d4c:	bf 91       	pop	r27
    1d4e:	af 91       	pop	r26
    1d50:	9f 91       	pop	r25
    1d52:	8f 91       	pop	r24
    1d54:	7f 91       	pop	r23
    1d56:	6f 91       	pop	r22
    1d58:	5f 91       	pop	r21
    1d5a:	4f 91       	pop	r20
    1d5c:	3f 91       	pop	r19
    1d5e:	2f 91       	pop	r18
    1d60:	0f 90       	pop	r0
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	0f 90       	pop	r0
    1d66:	1f 90       	pop	r1
    1d68:	18 95       	reti

00001d6a <Timer1_init>:
 *******************************************************************************/

/* Description
Function to initialize the Timer driver*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <Timer1_init+0x6>
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <Timer1_init+0x8>
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
	 /* OC1A/OC1B disconnected COM1A1/COM1B1=0 and COM1A0/COM1B0=0
	 * FOC1A=1 FOC1B=0 for non-PWM mode*/
	TCCR1A=0x08;
    1d7a:	ef e4       	ldi	r30, 0x4F	; 79
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	88 e0       	ldi	r24, 0x08	; 8
    1d80:	80 83       	st	Z, r24

	//the prescaler
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    1d82:	ae e4       	ldi	r26, 0x4E	; 78
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	ee e4       	ldi	r30, 0x4E	; 78
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	98 7f       	andi	r25, 0xF8	; 248
    1d90:	e9 81       	ldd	r30, Y+1	; 0x01
    1d92:	fa 81       	ldd	r31, Y+2	; 0x02
    1d94:	84 81       	ldd	r24, Z+4	; 0x04
    1d96:	89 2b       	or	r24, r25
    1d98:	8c 93       	st	X, r24

	//TIMER1 MODE
	switch(Config_Ptr->mode)
    1d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9e:	85 81       	ldd	r24, Z+5	; 0x05
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	3c 83       	std	Y+4, r19	; 0x04
    1da6:	2b 83       	std	Y+3, r18	; 0x03
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	31 f0       	breq	.+12     	; 0x1dbc <Timer1_init+0x52>
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	24 30       	cpi	r18, 0x04	; 4
    1db6:	31 05       	cpc	r19, r1
    1db8:	71 f1       	breq	.+92     	; 0x1e16 <Timer1_init+0xac>
    1dba:	5d c0       	rjmp	.+186    	; 0x1e76 <Timer1_init+0x10c>
	{
	case NORMAL:
		CLEAR_BIT(TCCR1A,WGM10);
    1dbc:	af e4       	ldi	r26, 0x4F	; 79
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	ef e4       	ldi	r30, 0x4F	; 79
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8e 7f       	andi	r24, 0xFE	; 254
    1dc8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    1dca:	af e4       	ldi	r26, 0x4F	; 79
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	ef e4       	ldi	r30, 0x4F	; 79
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8d 7f       	andi	r24, 0xFD	; 253
    1dd6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    1dd8:	ae e4       	ldi	r26, 0x4E	; 78
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	ee e4       	ldi	r30, 0x4E	; 78
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	87 7f       	andi	r24, 0xF7	; 247
    1de4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    1de6:	ae e4       	ldi	r26, 0x4E	; 78
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	ee e4       	ldi	r30, 0x4E	; 78
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	8f 7e       	andi	r24, 0xEF	; 239
    1df2:	8c 93       	st	X, r24
		//the initial value in TCNT1
		TCNT1=Config_Ptr->initial_value;
    1df4:	ac e4       	ldi	r26, 0x4C	; 76
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfc:	80 81       	ld	r24, Z
    1dfe:	91 81       	ldd	r25, Z+1	; 0x01
    1e00:	11 96       	adiw	r26, 0x01	; 1
    1e02:	9c 93       	st	X, r25
    1e04:	8e 93       	st	-X, r24
		//Enable Overflow Interrupt
		SET_BIT(TIMSK,TOIE1);
    1e06:	a9 e5       	ldi	r26, 0x59	; 89
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e9 e5       	ldi	r30, 0x59	; 89
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	84 60       	ori	r24, 0x04	; 4
    1e12:	8c 93       	st	X, r24
    1e14:	30 c0       	rjmp	.+96     	; 0x1e76 <Timer1_init+0x10c>
		break;

	case CTC:
		CLEAR_BIT(TCCR1A,WGM10);
    1e16:	af e4       	ldi	r26, 0x4F	; 79
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	ef e4       	ldi	r30, 0x4F	; 79
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	8e 7f       	andi	r24, 0xFE	; 254
    1e22:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    1e24:	af e4       	ldi	r26, 0x4F	; 79
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	ef e4       	ldi	r30, 0x4F	; 79
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8d 7f       	andi	r24, 0xFD	; 253
    1e30:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    1e32:	ae e4       	ldi	r26, 0x4E	; 78
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	ee e4       	ldi	r30, 0x4E	; 78
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 60       	ori	r24, 0x08	; 8
    1e3e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    1e40:	ae e4       	ldi	r26, 0x4E	; 78
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	ee e4       	ldi	r30, 0x4E	; 78
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	8f 7e       	andi	r24, 0xEF	; 239
    1e4c:	8c 93       	st	X, r24
		//the compare value in OCR1A
		TCNT1 = 0;
    1e4e:	ec e4       	ldi	r30, 0x4C	; 76
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	11 82       	std	Z+1, r1	; 0x01
    1e54:	10 82       	st	Z, r1
		OCR1A=Config_Ptr->compare_value;
    1e56:	aa e4       	ldi	r26, 0x4A	; 74
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5e:	82 81       	ldd	r24, Z+2	; 0x02
    1e60:	93 81       	ldd	r25, Z+3	; 0x03
    1e62:	11 96       	adiw	r26, 0x01	; 1
    1e64:	9c 93       	st	X, r25
    1e66:	8e 93       	st	-X, r24
		//Enable Output Compare A Match Interrupt
		SET_BIT(TIMSK,OCIE1A);
    1e68:	a9 e5       	ldi	r26, 0x59	; 89
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e9 e5       	ldi	r30, 0x59	; 89
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 61       	ori	r24, 0x10	; 16
    1e74:	8c 93       	st	X, r24
		break;
	}
}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <Timer1_deInit>:

/*Description
Function to disable the Timer1.*/
void Timer1_deInit(void)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    1e8c:	ef e4       	ldi	r30, 0x4F	; 79
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	10 82       	st	Z, r1
	TCCR1B=0;
    1e92:	ee e4       	ldi	r30, 0x4E	; 78
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	10 82       	st	Z, r1
	OCR1A=0;
    1e98:	ea e4       	ldi	r30, 0x4A	; 74
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	11 82       	std	Z+1, r1	; 0x01
    1e9e:	10 82       	st	Z, r1
	TCNT1=0;
    1ea0:	ec e4       	ldi	r30, 0x4C	; 76
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	11 82       	std	Z+1, r1	; 0x01
    1ea6:	10 82       	st	Z, r1
	TIMSK=TIMSK&0xC3;
    1ea8:	a9 e5       	ldi	r26, 0x59	; 89
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e9 e5       	ldi	r30, 0x59	; 89
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	83 7c       	andi	r24, 0xC3	; 195
    1eb4:	8c 93       	st	X, r24
	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1eb6:	10 92 0c 01 	sts	0x010C, r1
    1eba:	10 92 0b 01 	sts	0x010B, r1
}
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <Timer1_setCallBack>:

/*Description
Function to set the Call Back function address.*/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <Timer1_setCallBack+0x6>
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	9a 83       	std	Y+2, r25	; 0x02
    1ed0:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	90 93 0c 01 	sts	0x010C, r25
    1eda:	80 93 0b 01 	sts	0x010B, r24
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <GPIO_setupPinDirection+0x6>
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <GPIO_setupPinDirection+0x8>
    1ef0:	0f 92       	push	r0
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	6a 83       	std	Y+2, r22	; 0x02
    1efa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	88 30       	cpi	r24, 0x08	; 8
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <GPIO_setupPinDirection+0x1c>
    1f02:	d5 c0       	rjmp	.+426    	; 0x20ae <GPIO_setupPinDirection+0x1c6>
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	84 30       	cpi	r24, 0x04	; 4
    1f08:	08 f0       	brcs	.+2      	; 0x1f0c <GPIO_setupPinDirection+0x24>
    1f0a:	d1 c0       	rjmp	.+418    	; 0x20ae <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	3d 83       	std	Y+5, r19	; 0x05
    1f14:	2c 83       	std	Y+4, r18	; 0x04
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <GPIO_setupPinDirection+0x3a>
    1f20:	43 c0       	rjmp	.+134    	; 0x1fa8 <GPIO_setupPinDirection+0xc0>
    1f22:	2c 81       	ldd	r18, Y+4	; 0x04
    1f24:	3d 81       	ldd	r19, Y+5	; 0x05
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <GPIO_setupPinDirection+0x4e>
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	71 f0       	breq	.+28     	; 0x1f50 <GPIO_setupPinDirection+0x68>
    1f34:	bc c0       	rjmp	.+376    	; 0x20ae <GPIO_setupPinDirection+0x1c6>
    1f36:	2c 81       	ldd	r18, Y+4	; 0x04
    1f38:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <GPIO_setupPinDirection+0x5a>
    1f40:	5f c0       	rjmp	.+190    	; 0x2000 <GPIO_setupPinDirection+0x118>
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	9d 81       	ldd	r25, Y+5	; 0x05
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	91 05       	cpc	r25, r1
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <GPIO_setupPinDirection+0x66>
    1f4c:	85 c0       	rjmp	.+266    	; 0x2058 <GPIO_setupPinDirection+0x170>
    1f4e:	af c0       	rjmp	.+350    	; 0x20ae <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	a1 f4       	brne	.+40     	; 0x1f7e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1f56:	aa e3       	ldi	r26, 0x3A	; 58
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	ea e3       	ldi	r30, 0x3A	; 58
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	48 2f       	mov	r20, r24
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 2e       	mov	r0, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <GPIO_setupPinDirection+0x8c>
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	0a 94       	dec	r0
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <GPIO_setupPinDirection+0x88>
    1f78:	84 2b       	or	r24, r20
    1f7a:	8c 93       	st	X, r24
    1f7c:	98 c0       	rjmp	.+304    	; 0x20ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1f7e:	aa e3       	ldi	r26, 0x3A	; 58
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	ea e3       	ldi	r30, 0x3A	; 58
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	48 2f       	mov	r20, r24
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	02 2e       	mov	r0, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <GPIO_setupPinDirection+0xb4>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	0a 94       	dec	r0
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <GPIO_setupPinDirection+0xb0>
    1fa0:	80 95       	com	r24
    1fa2:	84 23       	and	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	83 c0       	rjmp	.+262    	; 0x20ae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	a1 f4       	brne	.+40     	; 0x1fd6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1fae:	a7 e3       	ldi	r26, 0x37	; 55
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e7 e3       	ldi	r30, 0x37	; 55
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	48 2f       	mov	r20, r24
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <GPIO_setupPinDirection+0xe4>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <GPIO_setupPinDirection+0xe0>
    1fd0:	84 2b       	or	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	6c c0       	rjmp	.+216    	; 0x20ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1fd6:	a7 e3       	ldi	r26, 0x37	; 55
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e7 e3       	ldi	r30, 0x37	; 55
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <GPIO_setupPinDirection+0x10c>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <GPIO_setupPinDirection+0x108>
    1ff8:	80 95       	com	r24
    1ffa:	84 23       	and	r24, r20
    1ffc:	8c 93       	st	X, r24
    1ffe:	57 c0       	rjmp	.+174    	; 0x20ae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	a1 f4       	brne	.+40     	; 0x202e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2006:	a4 e3       	ldi	r26, 0x34	; 52
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e4 e3       	ldi	r30, 0x34	; 52
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	48 2f       	mov	r20, r24
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	02 2e       	mov	r0, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <GPIO_setupPinDirection+0x13c>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	0a 94       	dec	r0
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <GPIO_setupPinDirection+0x138>
    2028:	84 2b       	or	r24, r20
    202a:	8c 93       	st	X, r24
    202c:	40 c0       	rjmp	.+128    	; 0x20ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    202e:	a4 e3       	ldi	r26, 0x34	; 52
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e4 e3       	ldi	r30, 0x34	; 52
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	48 2f       	mov	r20, r24
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 2e       	mov	r0, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <GPIO_setupPinDirection+0x164>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	0a 94       	dec	r0
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <GPIO_setupPinDirection+0x160>
    2050:	80 95       	com	r24
    2052:	84 23       	and	r24, r20
    2054:	8c 93       	st	X, r24
    2056:	2b c0       	rjmp	.+86     	; 0x20ae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	a1 f4       	brne	.+40     	; 0x2086 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    205e:	a1 e3       	ldi	r26, 0x31	; 49
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e1 e3       	ldi	r30, 0x31	; 49
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	48 2f       	mov	r20, r24
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	02 2e       	mov	r0, r18
    2076:	02 c0       	rjmp	.+4      	; 0x207c <GPIO_setupPinDirection+0x194>
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	0a 94       	dec	r0
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <GPIO_setupPinDirection+0x190>
    2080:	84 2b       	or	r24, r20
    2082:	8c 93       	st	X, r24
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2086:	a1 e3       	ldi	r26, 0x31	; 49
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e1 e3       	ldi	r30, 0x31	; 49
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	48 2f       	mov	r20, r24
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 2e       	mov	r0, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <GPIO_setupPinDirection+0x1bc>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <GPIO_setupPinDirection+0x1b8>
    20a8:	80 95       	com	r24
    20aa:	84 23       	and	r24, r20
    20ac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <GPIO_writePin+0x6>
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <GPIO_writePin+0x8>
    20c6:	0f 92       	push	r0
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	6a 83       	std	Y+2, r22	; 0x02
    20d0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	88 30       	cpi	r24, 0x08	; 8
    20d6:	08 f0       	brcs	.+2      	; 0x20da <GPIO_writePin+0x1c>
    20d8:	d5 c0       	rjmp	.+426    	; 0x2284 <GPIO_writePin+0x1c6>
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	84 30       	cpi	r24, 0x04	; 4
    20de:	08 f0       	brcs	.+2      	; 0x20e2 <GPIO_writePin+0x24>
    20e0:	d1 c0       	rjmp	.+418    	; 0x2284 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	3d 83       	std	Y+5, r19	; 0x05
    20ea:	2c 83       	std	Y+4, r18	; 0x04
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	9d 81       	ldd	r25, Y+5	; 0x05
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	91 05       	cpc	r25, r1
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <GPIO_writePin+0x3a>
    20f6:	43 c0       	rjmp	.+134    	; 0x217e <GPIO_writePin+0xc0>
    20f8:	2c 81       	ldd	r18, Y+4	; 0x04
    20fa:	3d 81       	ldd	r19, Y+5	; 0x05
    20fc:	22 30       	cpi	r18, 0x02	; 2
    20fe:	31 05       	cpc	r19, r1
    2100:	2c f4       	brge	.+10     	; 0x210c <GPIO_writePin+0x4e>
    2102:	8c 81       	ldd	r24, Y+4	; 0x04
    2104:	9d 81       	ldd	r25, Y+5	; 0x05
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	71 f0       	breq	.+28     	; 0x2126 <GPIO_writePin+0x68>
    210a:	bc c0       	rjmp	.+376    	; 0x2284 <GPIO_writePin+0x1c6>
    210c:	2c 81       	ldd	r18, Y+4	; 0x04
    210e:	3d 81       	ldd	r19, Y+5	; 0x05
    2110:	22 30       	cpi	r18, 0x02	; 2
    2112:	31 05       	cpc	r19, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <GPIO_writePin+0x5a>
    2116:	5f c0       	rjmp	.+190    	; 0x21d6 <GPIO_writePin+0x118>
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	9d 81       	ldd	r25, Y+5	; 0x05
    211c:	83 30       	cpi	r24, 0x03	; 3
    211e:	91 05       	cpc	r25, r1
    2120:	09 f4       	brne	.+2      	; 0x2124 <GPIO_writePin+0x66>
    2122:	85 c0       	rjmp	.+266    	; 0x222e <GPIO_writePin+0x170>
    2124:	af c0       	rjmp	.+350    	; 0x2284 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	81 30       	cpi	r24, 0x01	; 1
    212a:	a1 f4       	brne	.+40     	; 0x2154 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    212c:	ab e3       	ldi	r26, 0x3B	; 59
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	eb e3       	ldi	r30, 0x3B	; 59
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	48 2f       	mov	r20, r24
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 2e       	mov	r0, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <GPIO_writePin+0x8c>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	0a 94       	dec	r0
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <GPIO_writePin+0x88>
    214e:	84 2b       	or	r24, r20
    2150:	8c 93       	st	X, r24
    2152:	98 c0       	rjmp	.+304    	; 0x2284 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2154:	ab e3       	ldi	r26, 0x3B	; 59
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	eb e3       	ldi	r30, 0x3B	; 59
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <GPIO_writePin+0xb4>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <GPIO_writePin+0xb0>
    2176:	80 95       	com	r24
    2178:	84 23       	and	r24, r20
    217a:	8c 93       	st	X, r24
    217c:	83 c0       	rjmp	.+262    	; 0x2284 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	a1 f4       	brne	.+40     	; 0x21ac <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2184:	a8 e3       	ldi	r26, 0x38	; 56
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e8 e3       	ldi	r30, 0x38	; 56
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	48 2f       	mov	r20, r24
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	02 2e       	mov	r0, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <GPIO_writePin+0xe4>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <GPIO_writePin+0xe0>
    21a6:	84 2b       	or	r24, r20
    21a8:	8c 93       	st	X, r24
    21aa:	6c c0       	rjmp	.+216    	; 0x2284 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    21ac:	a8 e3       	ldi	r26, 0x38	; 56
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e8 e3       	ldi	r30, 0x38	; 56
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 2e       	mov	r0, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <GPIO_writePin+0x10c>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <GPIO_writePin+0x108>
    21ce:	80 95       	com	r24
    21d0:	84 23       	and	r24, r20
    21d2:	8c 93       	st	X, r24
    21d4:	57 c0       	rjmp	.+174    	; 0x2284 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	a1 f4       	brne	.+40     	; 0x2204 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    21dc:	a5 e3       	ldi	r26, 0x35	; 53
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e5 e3       	ldi	r30, 0x35	; 53
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	48 2f       	mov	r20, r24
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	02 2e       	mov	r0, r18
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <GPIO_writePin+0x13c>
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	0a 94       	dec	r0
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <GPIO_writePin+0x138>
    21fe:	84 2b       	or	r24, r20
    2200:	8c 93       	st	X, r24
    2202:	40 c0       	rjmp	.+128    	; 0x2284 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2204:	a5 e3       	ldi	r26, 0x35	; 53
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e5 e3       	ldi	r30, 0x35	; 53
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <GPIO_writePin+0x164>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <GPIO_writePin+0x160>
    2226:	80 95       	com	r24
    2228:	84 23       	and	r24, r20
    222a:	8c 93       	st	X, r24
    222c:	2b c0       	rjmp	.+86     	; 0x2284 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	a1 f4       	brne	.+40     	; 0x225c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2234:	a2 e3       	ldi	r26, 0x32	; 50
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e2 e3       	ldi	r30, 0x32	; 50
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	48 2f       	mov	r20, r24
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	28 2f       	mov	r18, r24
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	02 2e       	mov	r0, r18
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <GPIO_writePin+0x194>
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	0a 94       	dec	r0
    2254:	e2 f7       	brpl	.-8      	; 0x224e <GPIO_writePin+0x190>
    2256:	84 2b       	or	r24, r20
    2258:	8c 93       	st	X, r24
    225a:	14 c0       	rjmp	.+40     	; 0x2284 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    225c:	a2 e3       	ldi	r26, 0x32	; 50
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e2 e3       	ldi	r30, 0x32	; 50
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	48 2f       	mov	r20, r24
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 2e       	mov	r0, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <GPIO_writePin+0x1bc>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <GPIO_writePin+0x1b8>
    227e:	80 95       	com	r24
    2280:	84 23       	and	r24, r20
    2282:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	00 d0       	rcall	.+0      	; 0x229a <GPIO_readPin+0x6>
    229a:	00 d0       	rcall	.+0      	; 0x229c <GPIO_readPin+0x8>
    229c:	0f 92       	push	r0
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	88 30       	cpi	r24, 0x08	; 8
    22aa:	08 f0       	brcs	.+2      	; 0x22ae <GPIO_readPin+0x1a>
    22ac:	9e c0       	rjmp	.+316    	; 0x23ea <GPIO_readPin+0x156>
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	84 30       	cpi	r24, 0x04	; 4
    22b2:	08 f0       	brcs	.+2      	; 0x22b6 <GPIO_readPin+0x22>
    22b4:	9a c0       	rjmp	.+308    	; 0x23ea <GPIO_readPin+0x156>
	{
		/* Do Nothing*/
			}
	else
	{
		switch(port_num){
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	3d 83       	std	Y+5, r19	; 0x05
    22be:	2c 83       	std	Y+4, r18	; 0x04
    22c0:	4c 81       	ldd	r20, Y+4	; 0x04
    22c2:	5d 81       	ldd	r21, Y+5	; 0x05
    22c4:	41 30       	cpi	r20, 0x01	; 1
    22c6:	51 05       	cpc	r21, r1
    22c8:	b1 f1       	breq	.+108    	; 0x2336 <GPIO_readPin+0xa2>
    22ca:	8c 81       	ldd	r24, Y+4	; 0x04
    22cc:	9d 81       	ldd	r25, Y+5	; 0x05
    22ce:	82 30       	cpi	r24, 0x02	; 2
    22d0:	91 05       	cpc	r25, r1
    22d2:	34 f4       	brge	.+12     	; 0x22e0 <GPIO_readPin+0x4c>
    22d4:	2c 81       	ldd	r18, Y+4	; 0x04
    22d6:	3d 81       	ldd	r19, Y+5	; 0x05
    22d8:	21 15       	cp	r18, r1
    22da:	31 05       	cpc	r19, r1
    22dc:	71 f0       	breq	.+28     	; 0x22fa <GPIO_readPin+0x66>
    22de:	85 c0       	rjmp	.+266    	; 0x23ea <GPIO_readPin+0x156>
    22e0:	4c 81       	ldd	r20, Y+4	; 0x04
    22e2:	5d 81       	ldd	r21, Y+5	; 0x05
    22e4:	42 30       	cpi	r20, 0x02	; 2
    22e6:	51 05       	cpc	r21, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <GPIO_readPin+0x58>
    22ea:	43 c0       	rjmp	.+134    	; 0x2372 <GPIO_readPin+0xde>
    22ec:	8c 81       	ldd	r24, Y+4	; 0x04
    22ee:	9d 81       	ldd	r25, Y+5	; 0x05
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	91 05       	cpc	r25, r1
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <GPIO_readPin+0x64>
    22f6:	5b c0       	rjmp	.+182    	; 0x23ae <GPIO_readPin+0x11a>
    22f8:	78 c0       	rjmp	.+240    	; 0x23ea <GPIO_readPin+0x156>
		case PORTA_ID:
			return (BIT_IS_SET(PINA,pin_num)>>pin_num);
    22fa:	e9 e3       	ldi	r30, 0x39	; 57
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	48 2f       	mov	r20, r24
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <GPIO_readPin+0x80>
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	2a 95       	dec	r18
    2316:	e2 f7       	brpl	.-8      	; 0x2310 <GPIO_readPin+0x7c>
    2318:	9a 01       	movw	r18, r20
    231a:	28 23       	and	r18, r24
    231c:	39 23       	and	r19, r25
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a9 01       	movw	r20, r18
    2326:	02 c0       	rjmp	.+4      	; 0x232c <GPIO_readPin+0x98>
    2328:	55 95       	asr	r21
    232a:	47 95       	ror	r20
    232c:	8a 95       	dec	r24
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <GPIO_readPin+0x94>
    2330:	ca 01       	movw	r24, r20
    2332:	8b 83       	std	Y+3, r24	; 0x03
    2334:	5b c0       	rjmp	.+182    	; 0x23ec <GPIO_readPin+0x158>
			break;
		case PORTB_ID:
			return (BIT_IS_SET(PINB,pin_num)>>pin_num);
    2336:	e6 e3       	ldi	r30, 0x36	; 54
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	48 2f       	mov	r20, r24
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <GPIO_readPin+0xbc>
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	2a 95       	dec	r18
    2352:	e2 f7       	brpl	.-8      	; 0x234c <GPIO_readPin+0xb8>
    2354:	9a 01       	movw	r18, r20
    2356:	28 23       	and	r18, r24
    2358:	39 23       	and	r19, r25
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a9 01       	movw	r20, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <GPIO_readPin+0xd4>
    2364:	55 95       	asr	r21
    2366:	47 95       	ror	r20
    2368:	8a 95       	dec	r24
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <GPIO_readPin+0xd0>
    236c:	ca 01       	movw	r24, r20
    236e:	8b 83       	std	Y+3, r24	; 0x03
    2370:	3d c0       	rjmp	.+122    	; 0x23ec <GPIO_readPin+0x158>
			break;
		case PORTC_ID:
			return (BIT_IS_SET(PINC,pin_num)>>pin_num);
    2372:	e3 e3       	ldi	r30, 0x33	; 51
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	02 c0       	rjmp	.+4      	; 0x238c <GPIO_readPin+0xf8>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	2a 95       	dec	r18
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <GPIO_readPin+0xf4>
    2390:	9a 01       	movw	r18, r20
    2392:	28 23       	and	r18, r24
    2394:	39 23       	and	r19, r25
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	a9 01       	movw	r20, r18
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <GPIO_readPin+0x110>
    23a0:	55 95       	asr	r21
    23a2:	47 95       	ror	r20
    23a4:	8a 95       	dec	r24
    23a6:	e2 f7       	brpl	.-8      	; 0x23a0 <GPIO_readPin+0x10c>
    23a8:	ca 01       	movw	r24, r20
    23aa:	8b 83       	std	Y+3, r24	; 0x03
    23ac:	1f c0       	rjmp	.+62     	; 0x23ec <GPIO_readPin+0x158>
			break;
		case PORTD_ID:
			return (BIT_IS_SET(PIND,pin_num)>>pin_num);
    23ae:	e0 e3       	ldi	r30, 0x30	; 48
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	48 2f       	mov	r20, r24
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <GPIO_readPin+0x134>
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	2a 95       	dec	r18
    23ca:	e2 f7       	brpl	.-8      	; 0x23c4 <GPIO_readPin+0x130>
    23cc:	9a 01       	movw	r18, r20
    23ce:	28 23       	and	r18, r24
    23d0:	39 23       	and	r19, r25
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	a9 01       	movw	r20, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <GPIO_readPin+0x14c>
    23dc:	55 95       	asr	r21
    23de:	47 95       	ror	r20
    23e0:	8a 95       	dec	r24
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <GPIO_readPin+0x148>
    23e4:	ca 01       	movw	r24, r20
    23e6:	8b 83       	std	Y+3, r24	; 0x03
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <GPIO_readPin+0x158>

		}

	}

	return LOGIC_LOW;
    23ea:	1b 82       	std	Y+3, r1	; 0x03
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <GPIO_setupPortDirection+0x6>
    2404:	00 d0       	rcall	.+0      	; 0x2406 <GPIO_setupPortDirection+0x8>
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	84 30       	cpi	r24, 0x04	; 4
    2412:	90 f5       	brcc	.+100    	; 0x2478 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	3c 83       	std	Y+4, r19	; 0x04
    241c:	2b 83       	std	Y+3, r18	; 0x03
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	91 05       	cpc	r25, r1
    2426:	d1 f0       	breq	.+52     	; 0x245c <GPIO_setupPortDirection+0x5e>
    2428:	2b 81       	ldd	r18, Y+3	; 0x03
    242a:	3c 81       	ldd	r19, Y+4	; 0x04
    242c:	22 30       	cpi	r18, 0x02	; 2
    242e:	31 05       	cpc	r19, r1
    2430:	2c f4       	brge	.+10     	; 0x243c <GPIO_setupPortDirection+0x3e>
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	9c 81       	ldd	r25, Y+4	; 0x04
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	61 f0       	breq	.+24     	; 0x2452 <GPIO_setupPortDirection+0x54>
    243a:	1e c0       	rjmp	.+60     	; 0x2478 <GPIO_setupPortDirection+0x7a>
    243c:	2b 81       	ldd	r18, Y+3	; 0x03
    243e:	3c 81       	ldd	r19, Y+4	; 0x04
    2440:	22 30       	cpi	r18, 0x02	; 2
    2442:	31 05       	cpc	r19, r1
    2444:	81 f0       	breq	.+32     	; 0x2466 <GPIO_setupPortDirection+0x68>
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	83 30       	cpi	r24, 0x03	; 3
    244c:	91 05       	cpc	r25, r1
    244e:	81 f0       	breq	.+32     	; 0x2470 <GPIO_setupPortDirection+0x72>
    2450:	13 c0       	rjmp	.+38     	; 0x2478 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2452:	ea e3       	ldi	r30, 0x3A	; 58
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	80 83       	st	Z, r24
    245a:	0e c0       	rjmp	.+28     	; 0x2478 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    245c:	e7 e3       	ldi	r30, 0x37	; 55
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	80 83       	st	Z, r24
    2464:	09 c0       	rjmp	.+18     	; 0x2478 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2466:	e4 e3       	ldi	r30, 0x34	; 52
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	80 83       	st	Z, r24
    246e:	04 c0       	rjmp	.+8      	; 0x2478 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2470:	e1 e3       	ldi	r30, 0x31	; 49
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	80 83       	st	Z, r24
			break;
		}

	}
}
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <GPIO_writePort+0x6>
    248c:	00 d0       	rcall	.+0      	; 0x248e <GPIO_writePort+0x8>
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	84 30       	cpi	r24, 0x04	; 4
    249a:	90 f5       	brcc	.+100    	; 0x2500 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	3c 83       	std	Y+4, r19	; 0x04
    24a4:	2b 83       	std	Y+3, r18	; 0x03
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	91 05       	cpc	r25, r1
    24ae:	d1 f0       	breq	.+52     	; 0x24e4 <GPIO_writePort+0x5e>
    24b0:	2b 81       	ldd	r18, Y+3	; 0x03
    24b2:	3c 81       	ldd	r19, Y+4	; 0x04
    24b4:	22 30       	cpi	r18, 0x02	; 2
    24b6:	31 05       	cpc	r19, r1
    24b8:	2c f4       	brge	.+10     	; 0x24c4 <GPIO_writePort+0x3e>
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	61 f0       	breq	.+24     	; 0x24da <GPIO_writePort+0x54>
    24c2:	1e c0       	rjmp	.+60     	; 0x2500 <GPIO_writePort+0x7a>
    24c4:	2b 81       	ldd	r18, Y+3	; 0x03
    24c6:	3c 81       	ldd	r19, Y+4	; 0x04
    24c8:	22 30       	cpi	r18, 0x02	; 2
    24ca:	31 05       	cpc	r19, r1
    24cc:	81 f0       	breq	.+32     	; 0x24ee <GPIO_writePort+0x68>
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	83 30       	cpi	r24, 0x03	; 3
    24d4:	91 05       	cpc	r25, r1
    24d6:	81 f0       	breq	.+32     	; 0x24f8 <GPIO_writePort+0x72>
    24d8:	13 c0       	rjmp	.+38     	; 0x2500 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    24da:	eb e3       	ldi	r30, 0x3B	; 59
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	80 83       	st	Z, r24
    24e2:	0e c0       	rjmp	.+28     	; 0x2500 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    24e4:	e8 e3       	ldi	r30, 0x38	; 56
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	80 83       	st	Z, r24
    24ec:	09 c0       	rjmp	.+18     	; 0x2500 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    24ee:	e5 e3       	ldi	r30, 0x35	; 53
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	80 83       	st	Z, r24
    24f6:	04 c0       	rjmp	.+8      	; 0x2500 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    24f8:	e2 e3       	ldi	r30, 0x32	; 50
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	80 83       	st	Z, r24
			break;
		}
	}
}
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	00 d0       	rcall	.+0      	; 0x2514 <GPIO_readPort+0x6>
    2514:	00 d0       	rcall	.+0      	; 0x2516 <GPIO_readPort+0x8>
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	84 30       	cpi	r24, 0x04	; 4
    2520:	98 f5       	brcc	.+102    	; 0x2588 <GPIO_readPort+0x7a>
		/* Do Nothing*/
			}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	28 2f       	mov	r18, r24
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	3c 83       	std	Y+4, r19	; 0x04
    252a:	2b 83       	std	Y+3, r18	; 0x03
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	91 05       	cpc	r25, r1
    2534:	d1 f0       	breq	.+52     	; 0x256a <GPIO_readPort+0x5c>
    2536:	2b 81       	ldd	r18, Y+3	; 0x03
    2538:	3c 81       	ldd	r19, Y+4	; 0x04
    253a:	22 30       	cpi	r18, 0x02	; 2
    253c:	31 05       	cpc	r19, r1
    253e:	2c f4       	brge	.+10     	; 0x254a <GPIO_readPort+0x3c>
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	61 f0       	breq	.+24     	; 0x2560 <GPIO_readPort+0x52>
    2548:	1f c0       	rjmp	.+62     	; 0x2588 <GPIO_readPort+0x7a>
    254a:	2b 81       	ldd	r18, Y+3	; 0x03
    254c:	3c 81       	ldd	r19, Y+4	; 0x04
    254e:	22 30       	cpi	r18, 0x02	; 2
    2550:	31 05       	cpc	r19, r1
    2552:	81 f0       	breq	.+32     	; 0x2574 <GPIO_readPort+0x66>
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	83 30       	cpi	r24, 0x03	; 3
    255a:	91 05       	cpc	r25, r1
    255c:	81 f0       	breq	.+32     	; 0x257e <GPIO_readPort+0x70>
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			return PINA;
    2560:	e9 e3       	ldi	r30, 0x39	; 57
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	90 81       	ld	r25, Z
    2566:	9a 83       	std	Y+2, r25	; 0x02
    2568:	10 c0       	rjmp	.+32     	; 0x258a <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    256a:	e6 e3       	ldi	r30, 0x36	; 54
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	20 81       	ld	r18, Z
    2570:	2a 83       	std	Y+2, r18	; 0x02
    2572:	0b c0       	rjmp	.+22     	; 0x258a <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    2574:	e3 e3       	ldi	r30, 0x33	; 51
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	30 81       	ld	r19, Z
    257a:	3a 83       	std	Y+2, r19	; 0x02
    257c:	06 c0       	rjmp	.+12     	; 0x258a <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    257e:	e0 e3       	ldi	r30, 0x30	; 48
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	8a 83       	std	Y+2, r24	; 0x02
    2586:	01 c0       	rjmp	.+2      	; 0x258a <GPIO_readPort+0x7c>
			break;
		}
	}
	return LOGIC_LOW;
    2588:	1a 82       	std	Y+2, r1	; 0x02
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <KEYPAD_getPressedKey+0x6>
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	64 e0       	ldi	r22, 0x04	; 4
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	65 e0       	ldi	r22, 0x05	; 5
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	66 e0       	ldi	r22, 0x06	; 6
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	67 e0       	ldi	r22, 0x07	; 7
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>

	/* Set/Clear the row output pin */
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	64 e0       	ldi	r22, 0x04	; 4
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	65 e0       	ldi	r22, 0x05	; 5
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	66 e0       	ldi	r22, 0x06	; 6
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	67 e0       	ldi	r22, 0x07	; 7
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	62 e0       	ldi	r22, 0x02	; 2
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	63 e0       	ldi	r22, 0x03	; 3
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	64 e0       	ldi	r22, 0x04	; 4
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	65 e0       	ldi	r22, 0x05	; 5
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    261c:	19 82       	std	Y+1, r1	; 0x01
    261e:	3e c0       	rjmp	.+124    	; 0x269c <KEYPAD_getPressedKey+0x102>
			 * except this row will be output pin
			 */
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	98 2f       	mov	r25, r24
    2624:	9c 5f       	subi	r25, 0xFC	; 252
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	69 2f       	mov	r22, r25
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2630:	1a 82       	std	Y+2, r1	; 0x02
    2632:	26 c0       	rjmp	.+76     	; 0x2680 <KEYPAD_getPressedKey+0xe6>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	98 2f       	mov	r25, r24
    2638:	9e 5f       	subi	r25, 0xFE	; 254
    263a:	83 e0       	ldi	r24, 0x03	; 3
    263c:	69 2f       	mov	r22, r25
    263e:	0e 94 4a 11 	call	0x2294	; 0x2294 <GPIO_readPin>
    2642:	88 23       	and	r24, r24
    2644:	d1 f4       	brne	.+52     	; 0x267a <KEYPAD_getPressedKey+0xe0>
				{
//					GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
					GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	98 2f       	mov	r25, r24
    264a:	9c 5f       	subi	r25, 0xFC	; 252
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	69 2f       	mov	r22, r25
    2650:	41 e0       	ldi	r20, 0x01	; 1
    2652:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	88 2f       	mov	r24, r24
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	98 2f       	mov	r25, r24
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	89 0f       	add	r24, r25
    266a:	8f 5f       	subi	r24, 0xFF	; 255
    266c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <KEYPAD_4x4_adjustKeyNumber>
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		}
	}
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    267a:	8a 81       	ldd	r24, Y+2	; 0x02
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	8a 83       	std	Y+2, r24	; 0x02
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	84 30       	cpi	r24, 0x04	; 4
    2684:	b8 f2       	brcs	.-82     	; 0x2634 <KEYPAD_getPressedKey+0x9a>
						#endif
					#endif
				}
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	98 2f       	mov	r25, r24
    268a:	9c 5f       	subi	r25, 0xFC	; 252
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	69 2f       	mov	r22, r25
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	84 30       	cpi	r24, 0x04	; 4
    26a0:	08 f4       	brcc	.+2      	; 0x26a4 <KEYPAD_getPressedKey+0x10a>
    26a2:	be cf       	rjmp	.-132    	; 0x2620 <KEYPAD_getPressedKey+0x86>
    26a4:	bb cf       	rjmp	.-138    	; 0x261c <KEYPAD_getPressedKey+0x82>

000026a6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <KEYPAD_4x4_adjustKeyNumber+0x6>
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <KEYPAD_4x4_adjustKeyNumber+0x8>
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    26b4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	3c 83       	std	Y+4, r19	; 0x04
    26be:	2b 83       	std	Y+3, r18	; 0x03
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	9c 81       	ldd	r25, Y+4	; 0x04
    26c4:	88 30       	cpi	r24, 0x08	; 8
    26c6:	91 05       	cpc	r25, r1
    26c8:	09 f4       	brne	.+2      	; 0x26cc <KEYPAD_4x4_adjustKeyNumber+0x26>
    26ca:	70 c0       	rjmp	.+224    	; 0x27ac <KEYPAD_4x4_adjustKeyNumber+0x106>
    26cc:	2b 81       	ldd	r18, Y+3	; 0x03
    26ce:	3c 81       	ldd	r19, Y+4	; 0x04
    26d0:	29 30       	cpi	r18, 0x09	; 9
    26d2:	31 05       	cpc	r19, r1
    26d4:	5c f5       	brge	.+86     	; 0x272c <KEYPAD_4x4_adjustKeyNumber+0x86>
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	84 30       	cpi	r24, 0x04	; 4
    26dc:	91 05       	cpc	r25, r1
    26de:	09 f4       	brne	.+2      	; 0x26e2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    26e0:	59 c0       	rjmp	.+178    	; 0x2794 <KEYPAD_4x4_adjustKeyNumber+0xee>
    26e2:	2b 81       	ldd	r18, Y+3	; 0x03
    26e4:	3c 81       	ldd	r19, Y+4	; 0x04
    26e6:	25 30       	cpi	r18, 0x05	; 5
    26e8:	31 05       	cpc	r19, r1
    26ea:	9c f4       	brge	.+38     	; 0x2712 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	82 30       	cpi	r24, 0x02	; 2
    26f2:	91 05       	cpc	r25, r1
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    26f6:	48 c0       	rjmp	.+144    	; 0x2788 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    26f8:	2b 81       	ldd	r18, Y+3	; 0x03
    26fa:	3c 81       	ldd	r19, Y+4	; 0x04
    26fc:	23 30       	cpi	r18, 0x03	; 3
    26fe:	31 05       	cpc	r19, r1
    2700:	0c f0       	brlt	.+2      	; 0x2704 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2702:	45 c0       	rjmp	.+138    	; 0x278e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	9c 81       	ldd	r25, Y+4	; 0x04
    2708:	81 30       	cpi	r24, 0x01	; 1
    270a:	91 05       	cpc	r25, r1
    270c:	09 f4       	brne	.+2      	; 0x2710 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    270e:	39 c0       	rjmp	.+114    	; 0x2782 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2710:	67 c0       	rjmp	.+206    	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2712:	2b 81       	ldd	r18, Y+3	; 0x03
    2714:	3c 81       	ldd	r19, Y+4	; 0x04
    2716:	26 30       	cpi	r18, 0x06	; 6
    2718:	31 05       	cpc	r19, r1
    271a:	09 f4       	brne	.+2      	; 0x271e <KEYPAD_4x4_adjustKeyNumber+0x78>
    271c:	41 c0       	rjmp	.+130    	; 0x27a0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	87 30       	cpi	r24, 0x07	; 7
    2724:	91 05       	cpc	r25, r1
    2726:	0c f0       	brlt	.+2      	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2728:	3e c0       	rjmp	.+124    	; 0x27a6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    272a:	37 c0       	rjmp	.+110    	; 0x279a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    272c:	2b 81       	ldd	r18, Y+3	; 0x03
    272e:	3c 81       	ldd	r19, Y+4	; 0x04
    2730:	2c 30       	cpi	r18, 0x0C	; 12
    2732:	31 05       	cpc	r19, r1
    2734:	09 f4       	brne	.+2      	; 0x2738 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2736:	46 c0       	rjmp	.+140    	; 0x27c4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	8d 30       	cpi	r24, 0x0D	; 13
    273e:	91 05       	cpc	r25, r1
    2740:	5c f4       	brge	.+22     	; 0x2758 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2742:	2b 81       	ldd	r18, Y+3	; 0x03
    2744:	3c 81       	ldd	r19, Y+4	; 0x04
    2746:	2a 30       	cpi	r18, 0x0A	; 10
    2748:	31 05       	cpc	r19, r1
    274a:	b1 f1       	breq	.+108    	; 0x27b8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	8b 30       	cpi	r24, 0x0B	; 11
    2752:	91 05       	cpc	r25, r1
    2754:	a4 f5       	brge	.+104    	; 0x27be <KEYPAD_4x4_adjustKeyNumber+0x118>
    2756:	2d c0       	rjmp	.+90     	; 0x27b2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2758:	2b 81       	ldd	r18, Y+3	; 0x03
    275a:	3c 81       	ldd	r19, Y+4	; 0x04
    275c:	2e 30       	cpi	r18, 0x0E	; 14
    275e:	31 05       	cpc	r19, r1
    2760:	b9 f1       	breq	.+110    	; 0x27d0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	8e 30       	cpi	r24, 0x0E	; 14
    2768:	91 05       	cpc	r25, r1
    276a:	7c f1       	brlt	.+94     	; 0x27ca <KEYPAD_4x4_adjustKeyNumber+0x124>
    276c:	2b 81       	ldd	r18, Y+3	; 0x03
    276e:	3c 81       	ldd	r19, Y+4	; 0x04
    2770:	2f 30       	cpi	r18, 0x0F	; 15
    2772:	31 05       	cpc	r19, r1
    2774:	79 f1       	breq	.+94     	; 0x27d4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	80 31       	cpi	r24, 0x10	; 16
    277c:	91 05       	cpc	r25, r1
    277e:	69 f1       	breq	.+90     	; 0x27da <KEYPAD_4x4_adjustKeyNumber+0x134>
    2780:	2f c0       	rjmp	.+94     	; 0x27e0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2782:	87 e0       	ldi	r24, 0x07	; 7
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	2e c0       	rjmp	.+92     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2788:	88 e0       	ldi	r24, 0x08	; 8
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	2b c0       	rjmp	.+86     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    278e:	89 e0       	ldi	r24, 0x09	; 9
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	28 c0       	rjmp	.+80     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2794:	85 e2       	ldi	r24, 0x25	; 37
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	25 c0       	rjmp	.+74     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    279a:	84 e0       	ldi	r24, 0x04	; 4
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	22 c0       	rjmp	.+68     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    27a0:	85 e0       	ldi	r24, 0x05	; 5
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	1f c0       	rjmp	.+62     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    27a6:	86 e0       	ldi	r24, 0x06	; 6
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	1c c0       	rjmp	.+56     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    27ac:	8a e2       	ldi	r24, 0x2A	; 42
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	19 c0       	rjmp	.+50     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	16 c0       	rjmp	.+44     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    27b8:	82 e0       	ldi	r24, 0x02	; 2
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	13 c0       	rjmp	.+38     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    27be:	83 e0       	ldi	r24, 0x03	; 3
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	10 c0       	rjmp	.+32     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    27c4:	8d e2       	ldi	r24, 0x2D	; 45
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	0d c0       	rjmp	.+26     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = '#';  /* ASCII of Enter */
    27ca:	83 e2       	ldi	r24, 0x23	; 35
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	0a c0       	rjmp	.+20     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    27d0:	19 82       	std	Y+1, r1	; 0x01
    27d2:	08 c0       	rjmp	.+16     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    27d4:	8d e3       	ldi	r24, 0x3D	; 61
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	05 c0       	rjmp	.+10     	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    27da:	8b e2       	ldi	r24, 0x2B	; 43
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		//default: keypad_button = button_number;
		default: keypad_button = -1;
    27e0:	8f ef       	ldi	r24, 0xFF	; 255
    27e2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	2e 97       	sbiw	r28, 0x0e	; 14
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	41 e0       	ldi	r20, 0x01	; 1
    2818:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a0 ea       	ldi	r26, 0xA0	; 160
    2822:	b1 e4       	ldi	r27, 0x41	; 65
    2824:	8b 87       	std	Y+11, r24	; 0x0b
    2826:	9c 87       	std	Y+12, r25	; 0x0c
    2828:	ad 87       	std	Y+13, r26	; 0x0d
    282a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	6b 85       	ldd	r22, Y+11	; 0x0b
    282e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2830:	8d 85       	ldd	r24, Y+13	; 0x0d
    2832:	9e 85       	ldd	r25, Y+14	; 0x0e
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8f 83       	std	Y+7, r24	; 0x07
    2846:	98 87       	std	Y+8, r25	; 0x08
    2848:	a9 87       	std	Y+9, r26	; 0x09
    284a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2860:	88 23       	and	r24, r24
    2862:	2c f4       	brge	.+10     	; 0x286e <LCD_init+0x7a>
		__ticks = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <LCD_init+0xf8>
	else if (__tmp > 65535)
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	4c f5       	brge	.+82     	; 0x28d8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <LCD_init+0xda>
    28b0:	88 ec       	ldi	r24, 0xC8	; 200
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9c 83       	std	Y+4, r25	; 0x04
    28b6:	8b 83       	std	Y+3, r24	; 0x03
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_init+0xc8>
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <LCD_init+0xbc>
    28d6:	14 c0       	rjmp	.+40     	; 0x2900 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_init+0x104>
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	64 e0       	ldi	r22, 0x04	; 4
    2904:	41 e0       	ldi	r20, 0x01	; 1
    2906:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	65 e0       	ldi	r22, 0x05	; 5
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	66 e0       	ldi	r22, 0x06	; 6
    2918:	41 e0       	ldi	r20, 0x01	; 1
    291a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	67 e0       	ldi	r22, 0x07	; 7
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2928:	83 e3       	ldi	r24, 0x33	; 51
    292a:	0e 94 ac 14 	call	0x2958	; 0x2958 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    292e:	82 e3       	ldi	r24, 0x32	; 50
    2930:	0e 94 ac 14 	call	0x2958	; 0x2958 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2934:	88 e2       	ldi	r24, 0x28	; 40
    2936:	0e 94 ac 14 	call	0x2958	; 0x2958 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    293a:	8c e0       	ldi	r24, 0x0C	; 12
    293c:	0e 94 ac 14 	call	0x2958	; 0x2958 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	0e 94 ac 14 	call	0x2958	; 0x2958 <LCD_sendCommand>
}
    2946:	2e 96       	adiw	r28, 0x0e	; 14
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	c3 56       	subi	r28, 0x63	; 99
    2966:	d0 40       	sbci	r29, 0x00	; 0
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	fe 01       	movw	r30, r28
    2974:	ed 59       	subi	r30, 0x9D	; 157
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	40 e0       	ldi	r20, 0x00	; 0
    2980:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    2984:	fe 01       	movw	r30, r28
    2986:	e1 5a       	subi	r30, 0xA1	; 161
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a0 e8       	ldi	r26, 0x80	; 128
    2990:	bf e3       	ldi	r27, 0x3F	; 63
    2992:	80 83       	st	Z, r24
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	a2 83       	std	Z+2, r26	; 0x02
    2998:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299a:	8e 01       	movw	r16, r28
    299c:	05 5a       	subi	r16, 0xA5	; 165
    299e:	1f 4f       	sbci	r17, 0xFF	; 255
    29a0:	fe 01       	movw	r30, r28
    29a2:	e1 5a       	subi	r30, 0xA1	; 161
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4a ef       	ldi	r20, 0xFA	; 250
    29b4:	54 e4       	ldi	r21, 0x44	; 68
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	f8 01       	movw	r30, r16
    29c0:	80 83       	st	Z, r24
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	a2 83       	std	Z+2, r26	; 0x02
    29c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29c8:	fe 01       	movw	r30, r28
    29ca:	e5 5a       	subi	r30, 0xA5	; 165
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	60 81       	ld	r22, Z
    29d0:	71 81       	ldd	r23, Z+1	; 0x01
    29d2:	82 81       	ldd	r24, Z+2	; 0x02
    29d4:	93 81       	ldd	r25, Z+3	; 0x03
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	44 f4       	brge	.+16     	; 0x29f6 <LCD_sendCommand+0x9e>
		__ticks = 1;
    29e6:	fe 01       	movw	r30, r28
    29e8:	e7 5a       	subi	r30, 0xA7	; 167
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24
    29f4:	64 c0       	rjmp	.+200    	; 0x2abe <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    29f6:	fe 01       	movw	r30, r28
    29f8:	e5 5a       	subi	r30, 0xA5	; 165
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	0c f0       	brlt	.+2      	; 0x2a16 <LCD_sendCommand+0xbe>
    2a14:	43 c0       	rjmp	.+134    	; 0x2a9c <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a16:	fe 01       	movw	r30, r28
    2a18:	e1 5a       	subi	r30, 0xA1	; 161
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	8e 01       	movw	r16, r28
    2a36:	07 5a       	subi	r16, 0xA7	; 167
    2a38:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	f8 01       	movw	r30, r16
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	80 83       	st	Z, r24
    2a4c:	1f c0       	rjmp	.+62     	; 0x2a8c <LCD_sendCommand+0x134>
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e9 5a       	subi	r30, 0xA9	; 169
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	88 ec       	ldi	r24, 0xC8	; 200
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e9 5a       	subi	r30, 0xA9	; 169
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 81       	ld	r24, Z
    2a64:	91 81       	ldd	r25, Z+1	; 0x01
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <LCD_sendCommand+0x10e>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e9 5a       	subi	r30, 0xA9	; 169
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	de 01       	movw	r26, r28
    2a76:	a7 5a       	subi	r26, 0xA7	; 167
    2a78:	bf 4f       	sbci	r27, 0xFF	; 255
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e7 5a       	subi	r30, 0xA7	; 167
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 81       	ld	r24, Z
    2a82:	91 81       	ldd	r25, Z+1	; 0x01
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	11 96       	adiw	r26, 0x01	; 1
    2a88:	9c 93       	st	X, r25
    2a8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e7 5a       	subi	r30, 0xA7	; 167
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	d1 f6       	brne	.-76     	; 0x2a4e <LCD_sendCommand+0xf6>
    2a9a:	27 c0       	rjmp	.+78     	; 0x2aea <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	8e 01       	movw	r16, r28
    2a9e:	07 5a       	subi	r16, 0xA7	; 167
    2aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	e5 5a       	subi	r30, 0xA5	; 165
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	60 81       	ld	r22, Z
    2aaa:	71 81       	ldd	r23, Z+1	; 0x01
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	f8 01       	movw	r30, r16
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	80 83       	st	Z, r24
    2abe:	de 01       	movw	r26, r28
    2ac0:	ab 5a       	subi	r26, 0xAB	; 171
    2ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e7 5a       	subi	r30, 0xA7	; 167
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	80 81       	ld	r24, Z
    2acc:	91 81       	ldd	r25, Z+1	; 0x01
    2ace:	8d 93       	st	X+, r24
    2ad0:	9c 93       	st	X, r25
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	eb 5a       	subi	r30, 0xAB	; 171
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 81       	ld	r24, Z
    2ada:	91 81       	ldd	r25, Z+1	; 0x01
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <LCD_sendCommand+0x184>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	eb 5a       	subi	r30, 0xAB	; 171
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	41 e0       	ldi	r20, 0x01	; 1
    2af0:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    2af4:	fe 01       	movw	r30, r28
    2af6:	ef 5a       	subi	r30, 0xAF	; 175
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e8       	ldi	r26, 0x80	; 128
    2b00:	bf e3       	ldi	r27, 0x3F	; 63
    2b02:	80 83       	st	Z, r24
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	a2 83       	std	Z+2, r26	; 0x02
    2b08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0a:	8e 01       	movw	r16, r28
    2b0c:	03 5b       	subi	r16, 0xB3	; 179
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	ef 5a       	subi	r30, 0xAF	; 175
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a ef       	ldi	r20, 0xFA	; 250
    2b24:	54 e4       	ldi	r21, 0x44	; 68
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	f8 01       	movw	r30, r16
    2b30:	80 83       	st	Z, r24
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	a2 83       	std	Z+2, r26	; 0x02
    2b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e3 5b       	subi	r30, 0xB3	; 179
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	60 81       	ld	r22, Z
    2b40:	71 81       	ldd	r23, Z+1	; 0x01
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	93 81       	ldd	r25, Z+3	; 0x03
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e8       	ldi	r20, 0x80	; 128
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b52:	88 23       	and	r24, r24
    2b54:	44 f4       	brge	.+16     	; 0x2b66 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2b56:	fe 01       	movw	r30, r28
    2b58:	e5 5b       	subi	r30, 0xB5	; 181
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	80 83       	st	Z, r24
    2b64:	64 c0       	rjmp	.+200    	; 0x2c2e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2b66:	fe 01       	movw	r30, r28
    2b68:	e3 5b       	subi	r30, 0xB3	; 179
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	3f ef       	ldi	r19, 0xFF	; 255
    2b78:	4f e7       	ldi	r20, 0x7F	; 127
    2b7a:	57 e4       	ldi	r21, 0x47	; 71
    2b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b80:	18 16       	cp	r1, r24
    2b82:	0c f0       	brlt	.+2      	; 0x2b86 <LCD_sendCommand+0x22e>
    2b84:	43 c0       	rjmp	.+134    	; 0x2c0c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	fe 01       	movw	r30, r28
    2b88:	ef 5a       	subi	r30, 0xAF	; 175
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	60 81       	ld	r22, Z
    2b8e:	71 81       	ldd	r23, Z+1	; 0x01
    2b90:	82 81       	ldd	r24, Z+2	; 0x02
    2b92:	93 81       	ldd	r25, Z+3	; 0x03
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8e 01       	movw	r16, r28
    2ba6:	05 5b       	subi	r16, 0xB5	; 181
    2ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	1f c0       	rjmp	.+62     	; 0x2bfc <LCD_sendCommand+0x2a4>
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e7 5b       	subi	r30, 0xB7	; 183
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	88 ec       	ldi	r24, 0xC8	; 200
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e7 5b       	subi	r30, 0xB7	; 183
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	91 81       	ldd	r25, Z+1	; 0x01
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <LCD_sendCommand+0x27e>
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e7 5b       	subi	r30, 0xB7	; 183
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	91 83       	std	Z+1, r25	; 0x01
    2be2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be4:	de 01       	movw	r26, r28
    2be6:	a5 5b       	subi	r26, 0xB5	; 181
    2be8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	e5 5b       	subi	r30, 0xB5	; 181
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	11 96       	adiw	r26, 0x01	; 1
    2bf8:	9c 93       	st	X, r25
    2bfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e5 5b       	subi	r30, 0xB5	; 181
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	80 81       	ld	r24, Z
    2c04:	91 81       	ldd	r25, Z+1	; 0x01
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	d1 f6       	brne	.-76     	; 0x2bbe <LCD_sendCommand+0x266>
    2c0a:	27 c0       	rjmp	.+78     	; 0x2c5a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	8e 01       	movw	r16, r28
    2c0e:	05 5b       	subi	r16, 0xB5	; 181
    2c10:	1f 4f       	sbci	r17, 0xFF	; 255
    2c12:	fe 01       	movw	r30, r28
    2c14:	e3 5b       	subi	r30, 0xB3	; 179
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	f8 01       	movw	r30, r16
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	80 83       	st	Z, r24
    2c2e:	de 01       	movw	r26, r28
    2c30:	a9 5b       	subi	r26, 0xB9	; 185
    2c32:	bf 4f       	sbci	r27, 0xFF	; 255
    2c34:	fe 01       	movw	r30, r28
    2c36:	e5 5b       	subi	r30, 0xB5	; 181
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	91 81       	ldd	r25, Z+1	; 0x01
    2c3e:	8d 93       	st	X+, r24
    2c40:	9c 93       	st	X, r25
    2c42:	fe 01       	movw	r30, r28
    2c44:	e9 5b       	subi	r30, 0xB9	; 185
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	91 81       	ldd	r25, Z+1	; 0x01
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <LCD_sendCommand+0x2f4>
    2c50:	fe 01       	movw	r30, r28
    2c52:	e9 5b       	subi	r30, 0xB9	; 185
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ed 59       	subi	r30, 0x9D	; 157
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 81       	ld	r24, Z
    2c62:	88 2f       	mov	r24, r24
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	80 71       	andi	r24, 0x10	; 16
    2c68:	90 70       	andi	r25, 0x00	; 0
    2c6a:	95 95       	asr	r25
    2c6c:	87 95       	ror	r24
    2c6e:	95 95       	asr	r25
    2c70:	87 95       	ror	r24
    2c72:	95 95       	asr	r25
    2c74:	87 95       	ror	r24
    2c76:	95 95       	asr	r25
    2c78:	87 95       	ror	r24
    2c7a:	98 2f       	mov	r25, r24
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	64 e0       	ldi	r22, 0x04	; 4
    2c80:	49 2f       	mov	r20, r25
    2c82:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2c86:	fe 01       	movw	r30, r28
    2c88:	ed 59       	subi	r30, 0x9D	; 157
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	88 2f       	mov	r24, r24
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	80 72       	andi	r24, 0x20	; 32
    2c94:	90 70       	andi	r25, 0x00	; 0
    2c96:	95 95       	asr	r25
    2c98:	87 95       	ror	r24
    2c9a:	95 95       	asr	r25
    2c9c:	87 95       	ror	r24
    2c9e:	95 95       	asr	r25
    2ca0:	87 95       	ror	r24
    2ca2:	95 95       	asr	r25
    2ca4:	87 95       	ror	r24
    2ca6:	95 95       	asr	r25
    2ca8:	87 95       	ror	r24
    2caa:	98 2f       	mov	r25, r24
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	65 e0       	ldi	r22, 0x05	; 5
    2cb0:	49 2f       	mov	r20, r25
    2cb2:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	ed 59       	subi	r30, 0x9D	; 157
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 81       	ld	r24, Z
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	80 74       	andi	r24, 0x40	; 64
    2cc4:	90 70       	andi	r25, 0x00	; 0
    2cc6:	08 2e       	mov	r0, r24
    2cc8:	89 2f       	mov	r24, r25
    2cca:	00 0c       	add	r0, r0
    2ccc:	88 1f       	adc	r24, r24
    2cce:	99 0b       	sbc	r25, r25
    2cd0:	00 0c       	add	r0, r0
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	98 2f       	mov	r25, r24
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	66 e0       	ldi	r22, 0x06	; 6
    2cdc:	49 2f       	mov	r20, r25
    2cde:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ed 59       	subi	r30, 0x9D	; 157
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	80 81       	ld	r24, Z
    2cea:	98 2f       	mov	r25, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	99 27       	eor	r25, r25
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	67 e0       	ldi	r22, 0x07	; 7
    2cf6:	49 2f       	mov	r20, r25
    2cf8:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	ed 5b       	subi	r30, 0xBD	; 189
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e8       	ldi	r26, 0x80	; 128
    2d08:	bf e3       	ldi	r27, 0x3F	; 63
    2d0a:	80 83       	st	Z, r24
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	a2 83       	std	Z+2, r26	; 0x02
    2d10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d12:	8e 01       	movw	r16, r28
    2d14:	01 5c       	subi	r16, 0xC1	; 193
    2d16:	1f 4f       	sbci	r17, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ed 5b       	subi	r30, 0xBD	; 189
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	4a ef       	ldi	r20, 0xFA	; 250
    2d2c:	54 e4       	ldi	r21, 0x44	; 68
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	f8 01       	movw	r30, r16
    2d38:	80 83       	st	Z, r24
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	a2 83       	std	Z+2, r26	; 0x02
    2d3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d40:	fe 01       	movw	r30, r28
    2d42:	ff 96       	adiw	r30, 0x3f	; 63
    2d44:	60 81       	ld	r22, Z
    2d46:	71 81       	ldd	r23, Z+1	; 0x01
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	93 81       	ldd	r25, Z+3	; 0x03
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	40 e8       	ldi	r20, 0x80	; 128
    2d52:	5f e3       	ldi	r21, 0x3F	; 63
    2d54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d58:	88 23       	and	r24, r24
    2d5a:	2c f4       	brge	.+10     	; 0x2d66 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9e af       	std	Y+62, r25	; 0x3e
    2d62:	8d af       	std	Y+61, r24	; 0x3d
    2d64:	46 c0       	rjmp	.+140    	; 0x2df2 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2d66:	fe 01       	movw	r30, r28
    2d68:	ff 96       	adiw	r30, 0x3f	; 63
    2d6a:	60 81       	ld	r22, Z
    2d6c:	71 81       	ldd	r23, Z+1	; 0x01
    2d6e:	82 81       	ldd	r24, Z+2	; 0x02
    2d70:	93 81       	ldd	r25, Z+3	; 0x03
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	3f ef       	ldi	r19, 0xFF	; 255
    2d76:	4f e7       	ldi	r20, 0x7F	; 127
    2d78:	57 e4       	ldi	r21, 0x47	; 71
    2d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d7e:	18 16       	cp	r1, r24
    2d80:	64 f5       	brge	.+88     	; 0x2dda <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d82:	fe 01       	movw	r30, r28
    2d84:	ed 5b       	subi	r30, 0xBD	; 189
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	60 81       	ld	r22, Z
    2d8a:	71 81       	ldd	r23, Z+1	; 0x01
    2d8c:	82 81       	ldd	r24, Z+2	; 0x02
    2d8e:	93 81       	ldd	r25, Z+3	; 0x03
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e2       	ldi	r20, 0x20	; 32
    2d96:	51 e4       	ldi	r21, 0x41	; 65
    2d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	9e af       	std	Y+62, r25	; 0x3e
    2dae:	8d af       	std	Y+61, r24	; 0x3d
    2db0:	0f c0       	rjmp	.+30     	; 0x2dd0 <LCD_sendCommand+0x478>
    2db2:	88 ec       	ldi	r24, 0xC8	; 200
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	9c af       	std	Y+60, r25	; 0x3c
    2db8:	8b af       	std	Y+59, r24	; 0x3b
    2dba:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dbc:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	f1 f7       	brne	.-4      	; 0x2dbe <LCD_sendCommand+0x466>
    2dc2:	9c af       	std	Y+60, r25	; 0x3c
    2dc4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	9e af       	std	Y+62, r25	; 0x3e
    2dce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dd4:	00 97       	sbiw	r24, 0x00	; 0
    2dd6:	69 f7       	brne	.-38     	; 0x2db2 <LCD_sendCommand+0x45a>
    2dd8:	16 c0       	rjmp	.+44     	; 0x2e06 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ff 96       	adiw	r30, 0x3f	; 63
    2dde:	60 81       	ld	r22, Z
    2de0:	71 81       	ldd	r23, Z+1	; 0x01
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	9e af       	std	Y+62, r25	; 0x3e
    2df0:	8d af       	std	Y+61, r24	; 0x3d
    2df2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2df4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2df6:	9a af       	std	Y+58, r25	; 0x3a
    2df8:	89 af       	std	Y+57, r24	; 0x39
    2dfa:	89 ad       	ldd	r24, Y+57	; 0x39
    2dfc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <LCD_sendCommand+0x4a6>
    2e02:	9a af       	std	Y+58, r25	; 0x3a
    2e04:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	61 e0       	ldi	r22, 0x01	; 1
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	a0 e8       	ldi	r26, 0x80	; 128
    2e16:	bf e3       	ldi	r27, 0x3F	; 63
    2e18:	8d ab       	std	Y+53, r24	; 0x35
    2e1a:	9e ab       	std	Y+54, r25	; 0x36
    2e1c:	af ab       	std	Y+55, r26	; 0x37
    2e1e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	6d a9       	ldd	r22, Y+53	; 0x35
    2e22:	7e a9       	ldd	r23, Y+54	; 0x36
    2e24:	8f a9       	ldd	r24, Y+55	; 0x37
    2e26:	98 ad       	ldd	r25, Y+56	; 0x38
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	4a ef       	ldi	r20, 0xFA	; 250
    2e2e:	54 e4       	ldi	r21, 0x44	; 68
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	89 ab       	std	Y+49, r24	; 0x31
    2e3a:	9a ab       	std	Y+50, r25	; 0x32
    2e3c:	ab ab       	std	Y+51, r26	; 0x33
    2e3e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e40:	69 a9       	ldd	r22, Y+49	; 0x31
    2e42:	7a a9       	ldd	r23, Y+50	; 0x32
    2e44:	8b a9       	ldd	r24, Y+51	; 0x33
    2e46:	9c a9       	ldd	r25, Y+52	; 0x34
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e8       	ldi	r20, 0x80	; 128
    2e4e:	5f e3       	ldi	r21, 0x3F	; 63
    2e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e54:	88 23       	and	r24, r24
    2e56:	2c f4       	brge	.+10     	; 0x2e62 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	98 ab       	std	Y+48, r25	; 0x30
    2e5e:	8f a7       	std	Y+47, r24	; 0x2f
    2e60:	3f c0       	rjmp	.+126    	; 0x2ee0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2e62:	69 a9       	ldd	r22, Y+49	; 0x31
    2e64:	7a a9       	ldd	r23, Y+50	; 0x32
    2e66:	8b a9       	ldd	r24, Y+51	; 0x33
    2e68:	9c a9       	ldd	r25, Y+52	; 0x34
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	3f ef       	ldi	r19, 0xFF	; 255
    2e6e:	4f e7       	ldi	r20, 0x7F	; 127
    2e70:	57 e4       	ldi	r21, 0x47	; 71
    2e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	4c f5       	brge	.+82     	; 0x2ecc <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e7c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e7e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e80:	98 ad       	ldd	r25, Y+56	; 0x38
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e2       	ldi	r20, 0x20	; 32
    2e88:	51 e4       	ldi	r21, 0x41	; 65
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	98 ab       	std	Y+48, r25	; 0x30
    2ea0:	8f a7       	std	Y+47, r24	; 0x2f
    2ea2:	0f c0       	rjmp	.+30     	; 0x2ec2 <LCD_sendCommand+0x56a>
    2ea4:	88 ec       	ldi	r24, 0xC8	; 200
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	9e a7       	std	Y+46, r25	; 0x2e
    2eaa:	8d a7       	std	Y+45, r24	; 0x2d
    2eac:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eae:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <LCD_sendCommand+0x558>
    2eb4:	9e a7       	std	Y+46, r25	; 0x2e
    2eb6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eba:	98 a9       	ldd	r25, Y+48	; 0x30
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	98 ab       	std	Y+48, r25	; 0x30
    2ec0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	69 f7       	brne	.-38     	; 0x2ea4 <LCD_sendCommand+0x54c>
    2eca:	14 c0       	rjmp	.+40     	; 0x2ef4 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ecc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ece:	7a a9       	ldd	r23, Y+50	; 0x32
    2ed0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ed2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	98 ab       	std	Y+48, r25	; 0x30
    2ede:	8f a7       	std	Y+47, r24	; 0x2f
    2ee0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee4:	9c a7       	std	Y+44, r25	; 0x2c
    2ee6:	8b a7       	std	Y+43, r24	; 0x2b
    2ee8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eea:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <LCD_sendCommand+0x594>
    2ef0:	9c a7       	std	Y+44, r25	; 0x2c
    2ef2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	61 e0       	ldi	r22, 0x01	; 1
    2ef8:	41 e0       	ldi	r20, 0x01	; 1
    2efa:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	a0 e8       	ldi	r26, 0x80	; 128
    2f04:	bf e3       	ldi	r27, 0x3F	; 63
    2f06:	8f a3       	std	Y+39, r24	; 0x27
    2f08:	98 a7       	std	Y+40, r25	; 0x28
    2f0a:	a9 a7       	std	Y+41, r26	; 0x29
    2f0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f10:	78 a5       	ldd	r23, Y+40	; 0x28
    2f12:	89 a5       	ldd	r24, Y+41	; 0x29
    2f14:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	4a ef       	ldi	r20, 0xFA	; 250
    2f1c:	54 e4       	ldi	r21, 0x44	; 68
    2f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	8b a3       	std	Y+35, r24	; 0x23
    2f28:	9c a3       	std	Y+36, r25	; 0x24
    2f2a:	ad a3       	std	Y+37, r26	; 0x25
    2f2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f30:	7c a1       	ldd	r23, Y+36	; 0x24
    2f32:	8d a1       	ldd	r24, Y+37	; 0x25
    2f34:	9e a1       	ldd	r25, Y+38	; 0x26
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e8       	ldi	r20, 0x80	; 128
    2f3c:	5f e3       	ldi	r21, 0x3F	; 63
    2f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f42:	88 23       	and	r24, r24
    2f44:	2c f4       	brge	.+10     	; 0x2f50 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	9a a3       	std	Y+34, r25	; 0x22
    2f4c:	89 a3       	std	Y+33, r24	; 0x21
    2f4e:	3f c0       	rjmp	.+126    	; 0x2fce <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2f50:	6b a1       	ldd	r22, Y+35	; 0x23
    2f52:	7c a1       	ldd	r23, Y+36	; 0x24
    2f54:	8d a1       	ldd	r24, Y+37	; 0x25
    2f56:	9e a1       	ldd	r25, Y+38	; 0x26
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	3f ef       	ldi	r19, 0xFF	; 255
    2f5c:	4f e7       	ldi	r20, 0x7F	; 127
    2f5e:	57 e4       	ldi	r21, 0x47	; 71
    2f60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f64:	18 16       	cp	r1, r24
    2f66:	4c f5       	brge	.+82     	; 0x2fba <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f68:	6f a1       	ldd	r22, Y+39	; 0x27
    2f6a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f6c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e2       	ldi	r20, 0x20	; 32
    2f76:	51 e4       	ldi	r21, 0x41	; 65
    2f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	9a a3       	std	Y+34, r25	; 0x22
    2f8e:	89 a3       	std	Y+33, r24	; 0x21
    2f90:	0f c0       	rjmp	.+30     	; 0x2fb0 <LCD_sendCommand+0x658>
    2f92:	88 ec       	ldi	r24, 0xC8	; 200
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	98 a3       	std	Y+32, r25	; 0x20
    2f98:	8f 8f       	std	Y+31, r24	; 0x1f
    2f9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f9c:	98 a1       	ldd	r25, Y+32	; 0x20
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <LCD_sendCommand+0x646>
    2fa2:	98 a3       	std	Y+32, r25	; 0x20
    2fa4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa6:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa8:	9a a1       	ldd	r25, Y+34	; 0x22
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	9a a3       	std	Y+34, r25	; 0x22
    2fae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	69 f7       	brne	.-38     	; 0x2f92 <LCD_sendCommand+0x63a>
    2fb8:	14 c0       	rjmp	.+40     	; 0x2fe2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fba:	6b a1       	ldd	r22, Y+35	; 0x23
    2fbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2fbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2fc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	9a a3       	std	Y+34, r25	; 0x22
    2fcc:	89 a3       	std	Y+33, r24	; 0x21
    2fce:	89 a1       	ldd	r24, Y+33	; 0x21
    2fd0:	9a a1       	ldd	r25, Y+34	; 0x22
    2fd2:	9e 8f       	std	Y+30, r25	; 0x1e
    2fd4:	8d 8f       	std	Y+29, r24	; 0x1d
    2fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <LCD_sendCommand+0x682>
    2fde:	9e 8f       	std	Y+30, r25	; 0x1e
    2fe0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ed 59       	subi	r30, 0x9D	; 157
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	98 2f       	mov	r25, r24
    2fec:	91 70       	andi	r25, 0x01	; 1
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	64 e0       	ldi	r22, 0x04	; 4
    2ff2:	49 2f       	mov	r20, r25
    2ff4:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	ed 59       	subi	r30, 0x9D	; 157
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	82 70       	andi	r24, 0x02	; 2
    3006:	90 70       	andi	r25, 0x00	; 0
    3008:	95 95       	asr	r25
    300a:	87 95       	ror	r24
    300c:	98 2f       	mov	r25, r24
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	65 e0       	ldi	r22, 0x05	; 5
    3012:	49 2f       	mov	r20, r25
    3014:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    3018:	fe 01       	movw	r30, r28
    301a:	ed 59       	subi	r30, 0x9D	; 157
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	80 81       	ld	r24, Z
    3020:	88 2f       	mov	r24, r24
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	84 70       	andi	r24, 0x04	; 4
    3026:	90 70       	andi	r25, 0x00	; 0
    3028:	95 95       	asr	r25
    302a:	87 95       	ror	r24
    302c:	95 95       	asr	r25
    302e:	87 95       	ror	r24
    3030:	98 2f       	mov	r25, r24
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	66 e0       	ldi	r22, 0x06	; 6
    3036:	49 2f       	mov	r20, r25
    3038:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    303c:	fe 01       	movw	r30, r28
    303e:	ed 59       	subi	r30, 0x9D	; 157
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	88 2f       	mov	r24, r24
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	88 70       	andi	r24, 0x08	; 8
    304a:	90 70       	andi	r25, 0x00	; 0
    304c:	95 95       	asr	r25
    304e:	87 95       	ror	r24
    3050:	95 95       	asr	r25
    3052:	87 95       	ror	r24
    3054:	95 95       	asr	r25
    3056:	87 95       	ror	r24
    3058:	98 2f       	mov	r25, r24
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	67 e0       	ldi	r22, 0x07	; 7
    305e:	49 2f       	mov	r20, r25
    3060:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	a0 e8       	ldi	r26, 0x80	; 128
    306a:	bf e3       	ldi	r27, 0x3F	; 63
    306c:	89 8f       	std	Y+25, r24	; 0x19
    306e:	9a 8f       	std	Y+26, r25	; 0x1a
    3070:	ab 8f       	std	Y+27, r26	; 0x1b
    3072:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3074:	69 8d       	ldd	r22, Y+25	; 0x19
    3076:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3078:	8b 8d       	ldd	r24, Y+27	; 0x1b
    307a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	4a ef       	ldi	r20, 0xFA	; 250
    3082:	54 e4       	ldi	r21, 0x44	; 68
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	8d 8b       	std	Y+21, r24	; 0x15
    308e:	9e 8b       	std	Y+22, r25	; 0x16
    3090:	af 8b       	std	Y+23, r26	; 0x17
    3092:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3094:	6d 89       	ldd	r22, Y+21	; 0x15
    3096:	7e 89       	ldd	r23, Y+22	; 0x16
    3098:	8f 89       	ldd	r24, Y+23	; 0x17
    309a:	98 8d       	ldd	r25, Y+24	; 0x18
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e8       	ldi	r20, 0x80	; 128
    30a2:	5f e3       	ldi	r21, 0x3F	; 63
    30a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30a8:	88 23       	and	r24, r24
    30aa:	2c f4       	brge	.+10     	; 0x30b6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9c 8b       	std	Y+20, r25	; 0x14
    30b2:	8b 8b       	std	Y+19, r24	; 0x13
    30b4:	3f c0       	rjmp	.+126    	; 0x3134 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    30b6:	6d 89       	ldd	r22, Y+21	; 0x15
    30b8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ba:	8f 89       	ldd	r24, Y+23	; 0x17
    30bc:	98 8d       	ldd	r25, Y+24	; 0x18
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	3f ef       	ldi	r19, 0xFF	; 255
    30c2:	4f e7       	ldi	r20, 0x7F	; 127
    30c4:	57 e4       	ldi	r21, 0x47	; 71
    30c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ca:	18 16       	cp	r1, r24
    30cc:	4c f5       	brge	.+82     	; 0x3120 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ce:	69 8d       	ldd	r22, Y+25	; 0x19
    30d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e2       	ldi	r20, 0x20	; 32
    30dc:	51 e4       	ldi	r21, 0x41	; 65
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9c 8b       	std	Y+20, r25	; 0x14
    30f4:	8b 8b       	std	Y+19, r24	; 0x13
    30f6:	0f c0       	rjmp	.+30     	; 0x3116 <LCD_sendCommand+0x7be>
    30f8:	88 ec       	ldi	r24, 0xC8	; 200
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9a 8b       	std	Y+18, r25	; 0x12
    30fe:	89 8b       	std	Y+17, r24	; 0x11
    3100:	89 89       	ldd	r24, Y+17	; 0x11
    3102:	9a 89       	ldd	r25, Y+18	; 0x12
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <LCD_sendCommand+0x7ac>
    3108:	9a 8b       	std	Y+18, r25	; 0x12
    310a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310c:	8b 89       	ldd	r24, Y+19	; 0x13
    310e:	9c 89       	ldd	r25, Y+20	; 0x14
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	9c 8b       	std	Y+20, r25	; 0x14
    3114:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3116:	8b 89       	ldd	r24, Y+19	; 0x13
    3118:	9c 89       	ldd	r25, Y+20	; 0x14
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	69 f7       	brne	.-38     	; 0x30f8 <LCD_sendCommand+0x7a0>
    311e:	14 c0       	rjmp	.+40     	; 0x3148 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3120:	6d 89       	ldd	r22, Y+21	; 0x15
    3122:	7e 89       	ldd	r23, Y+22	; 0x16
    3124:	8f 89       	ldd	r24, Y+23	; 0x17
    3126:	98 8d       	ldd	r25, Y+24	; 0x18
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	9c 8b       	std	Y+20, r25	; 0x14
    3132:	8b 8b       	std	Y+19, r24	; 0x13
    3134:	8b 89       	ldd	r24, Y+19	; 0x13
    3136:	9c 89       	ldd	r25, Y+20	; 0x14
    3138:	98 8b       	std	Y+16, r25	; 0x10
    313a:	8f 87       	std	Y+15, r24	; 0x0f
    313c:	8f 85       	ldd	r24, Y+15	; 0x0f
    313e:	98 89       	ldd	r25, Y+16	; 0x10
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <LCD_sendCommand+0x7e8>
    3144:	98 8b       	std	Y+16, r25	; 0x10
    3146:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	61 e0       	ldi	r22, 0x01	; 1
    314c:	40 e0       	ldi	r20, 0x00	; 0
    314e:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	a0 e8       	ldi	r26, 0x80	; 128
    3158:	bf e3       	ldi	r27, 0x3F	; 63
    315a:	8b 87       	std	Y+11, r24	; 0x0b
    315c:	9c 87       	std	Y+12, r25	; 0x0c
    315e:	ad 87       	std	Y+13, r26	; 0x0d
    3160:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3162:	6b 85       	ldd	r22, Y+11	; 0x0b
    3164:	7c 85       	ldd	r23, Y+12	; 0x0c
    3166:	8d 85       	ldd	r24, Y+13	; 0x0d
    3168:	9e 85       	ldd	r25, Y+14	; 0x0e
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	4a ef       	ldi	r20, 0xFA	; 250
    3170:	54 e4       	ldi	r21, 0x44	; 68
    3172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	8f 83       	std	Y+7, r24	; 0x07
    317c:	98 87       	std	Y+8, r25	; 0x08
    317e:	a9 87       	std	Y+9, r26	; 0x09
    3180:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3182:	6f 81       	ldd	r22, Y+7	; 0x07
    3184:	78 85       	ldd	r23, Y+8	; 0x08
    3186:	89 85       	ldd	r24, Y+9	; 0x09
    3188:	9a 85       	ldd	r25, Y+10	; 0x0a
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e8       	ldi	r20, 0x80	; 128
    3190:	5f e3       	ldi	r21, 0x3F	; 63
    3192:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3196:	88 23       	and	r24, r24
    3198:	2c f4       	brge	.+10     	; 0x31a4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	8d 83       	std	Y+5, r24	; 0x05
    31a2:	3f c0       	rjmp	.+126    	; 0x3222 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    31a4:	6f 81       	ldd	r22, Y+7	; 0x07
    31a6:	78 85       	ldd	r23, Y+8	; 0x08
    31a8:	89 85       	ldd	r24, Y+9	; 0x09
    31aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	3f ef       	ldi	r19, 0xFF	; 255
    31b0:	4f e7       	ldi	r20, 0x7F	; 127
    31b2:	57 e4       	ldi	r21, 0x47	; 71
    31b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b8:	18 16       	cp	r1, r24
    31ba:	4c f5       	brge	.+82     	; 0x320e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31be:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e2       	ldi	r20, 0x20	; 32
    31ca:	51 e4       	ldi	r21, 0x41	; 65
    31cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	bc 01       	movw	r22, r24
    31d6:	cd 01       	movw	r24, r26
    31d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	9e 83       	std	Y+6, r25	; 0x06
    31e2:	8d 83       	std	Y+5, r24	; 0x05
    31e4:	0f c0       	rjmp	.+30     	; 0x3204 <LCD_sendCommand+0x8ac>
    31e6:	88 ec       	ldi	r24, 0xC8	; 200
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	9c 83       	std	Y+4, r25	; 0x04
    31ec:	8b 83       	std	Y+3, r24	; 0x03
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	9c 81       	ldd	r25, Y+4	; 0x04
    31f2:	01 97       	sbiw	r24, 0x01	; 1
    31f4:	f1 f7       	brne	.-4      	; 0x31f2 <LCD_sendCommand+0x89a>
    31f6:	9c 83       	std	Y+4, r25	; 0x04
    31f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fa:	8d 81       	ldd	r24, Y+5	; 0x05
    31fc:	9e 81       	ldd	r25, Y+6	; 0x06
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	9e 83       	std	Y+6, r25	; 0x06
    3202:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3204:	8d 81       	ldd	r24, Y+5	; 0x05
    3206:	9e 81       	ldd	r25, Y+6	; 0x06
    3208:	00 97       	sbiw	r24, 0x00	; 0
    320a:	69 f7       	brne	.-38     	; 0x31e6 <LCD_sendCommand+0x88e>
    320c:	14 c0       	rjmp	.+40     	; 0x3236 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    320e:	6f 81       	ldd	r22, Y+7	; 0x07
    3210:	78 85       	ldd	r23, Y+8	; 0x08
    3212:	89 85       	ldd	r24, Y+9	; 0x09
    3214:	9a 85       	ldd	r25, Y+10	; 0x0a
    3216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	9e 83       	std	Y+6, r25	; 0x06
    3220:	8d 83       	std	Y+5, r24	; 0x05
    3222:	8d 81       	ldd	r24, Y+5	; 0x05
    3224:	9e 81       	ldd	r25, Y+6	; 0x06
    3226:	9a 83       	std	Y+2, r25	; 0x02
    3228:	89 83       	std	Y+1, r24	; 0x01
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	9a 81       	ldd	r25, Y+2	; 0x02
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	f1 f7       	brne	.-4      	; 0x322e <LCD_sendCommand+0x8d6>
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3236:	cd 59       	subi	r28, 0x9D	; 157
    3238:	df 4f       	sbci	r29, 0xFF	; 255
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	cd bf       	out	0x3d, r28	; 61
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	08 95       	ret

0000324e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	c3 56       	subi	r28, 0x63	; 99
    325c:	d0 40       	sbci	r29, 0x00	; 0
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	fe 01       	movw	r30, r28
    326a:	ed 59       	subi	r30, 0x9D	; 157
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	41 e0       	ldi	r20, 0x01	; 1
    3276:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    327a:	fe 01       	movw	r30, r28
    327c:	e1 5a       	subi	r30, 0xA1	; 161
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	a0 e8       	ldi	r26, 0x80	; 128
    3286:	bf e3       	ldi	r27, 0x3F	; 63
    3288:	80 83       	st	Z, r24
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	a2 83       	std	Z+2, r26	; 0x02
    328e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3290:	8e 01       	movw	r16, r28
    3292:	05 5a       	subi	r16, 0xA5	; 165
    3294:	1f 4f       	sbci	r17, 0xFF	; 255
    3296:	fe 01       	movw	r30, r28
    3298:	e1 5a       	subi	r30, 0xA1	; 161
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	4a ef       	ldi	r20, 0xFA	; 250
    32aa:	54 e4       	ldi	r21, 0x44	; 68
    32ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	f8 01       	movw	r30, r16
    32b6:	80 83       	st	Z, r24
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	a2 83       	std	Z+2, r26	; 0x02
    32bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32be:	fe 01       	movw	r30, r28
    32c0:	e5 5a       	subi	r30, 0xA5	; 165
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e8       	ldi	r20, 0x80	; 128
    32d2:	5f e3       	ldi	r21, 0x3F	; 63
    32d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32d8:	88 23       	and	r24, r24
    32da:	44 f4       	brge	.+16     	; 0x32ec <LCD_displayCharacter+0x9e>
		__ticks = 1;
    32dc:	fe 01       	movw	r30, r28
    32de:	e7 5a       	subi	r30, 0xA7	; 167
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	80 83       	st	Z, r24
    32ea:	64 c0       	rjmp	.+200    	; 0x33b4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    32ec:	fe 01       	movw	r30, r28
    32ee:	e5 5a       	subi	r30, 0xA5	; 165
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	60 81       	ld	r22, Z
    32f4:	71 81       	ldd	r23, Z+1	; 0x01
    32f6:	82 81       	ldd	r24, Z+2	; 0x02
    32f8:	93 81       	ldd	r25, Z+3	; 0x03
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	4f e7       	ldi	r20, 0x7F	; 127
    3300:	57 e4       	ldi	r21, 0x47	; 71
    3302:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3306:	18 16       	cp	r1, r24
    3308:	0c f0       	brlt	.+2      	; 0x330c <LCD_displayCharacter+0xbe>
    330a:	43 c0       	rjmp	.+134    	; 0x3392 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330c:	fe 01       	movw	r30, r28
    330e:	e1 5a       	subi	r30, 0xA1	; 161
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	60 81       	ld	r22, Z
    3314:	71 81       	ldd	r23, Z+1	; 0x01
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	40 e2       	ldi	r20, 0x20	; 32
    3320:	51 e4       	ldi	r21, 0x41	; 65
    3322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	8e 01       	movw	r16, r28
    332c:	07 5a       	subi	r16, 0xA7	; 167
    332e:	1f 4f       	sbci	r17, 0xFF	; 255
    3330:	bc 01       	movw	r22, r24
    3332:	cd 01       	movw	r24, r26
    3334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	f8 01       	movw	r30, r16
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	80 83       	st	Z, r24
    3342:	1f c0       	rjmp	.+62     	; 0x3382 <LCD_displayCharacter+0x134>
    3344:	fe 01       	movw	r30, r28
    3346:	e9 5a       	subi	r30, 0xA9	; 169
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	88 ec       	ldi	r24, 0xC8	; 200
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	80 83       	st	Z, r24
    3352:	fe 01       	movw	r30, r28
    3354:	e9 5a       	subi	r30, 0xA9	; 169
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	80 81       	ld	r24, Z
    335a:	91 81       	ldd	r25, Z+1	; 0x01
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <LCD_displayCharacter+0x10e>
    3360:	fe 01       	movw	r30, r28
    3362:	e9 5a       	subi	r30, 0xA9	; 169
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	91 83       	std	Z+1, r25	; 0x01
    3368:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336a:	de 01       	movw	r26, r28
    336c:	a7 5a       	subi	r26, 0xA7	; 167
    336e:	bf 4f       	sbci	r27, 0xFF	; 255
    3370:	fe 01       	movw	r30, r28
    3372:	e7 5a       	subi	r30, 0xA7	; 167
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 81       	ld	r24, Z
    3378:	91 81       	ldd	r25, Z+1	; 0x01
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	11 96       	adiw	r26, 0x01	; 1
    337e:	9c 93       	st	X, r25
    3380:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3382:	fe 01       	movw	r30, r28
    3384:	e7 5a       	subi	r30, 0xA7	; 167
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	80 81       	ld	r24, Z
    338a:	91 81       	ldd	r25, Z+1	; 0x01
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	d1 f6       	brne	.-76     	; 0x3344 <LCD_displayCharacter+0xf6>
    3390:	27 c0       	rjmp	.+78     	; 0x33e0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3392:	8e 01       	movw	r16, r28
    3394:	07 5a       	subi	r16, 0xA7	; 167
    3396:	1f 4f       	sbci	r17, 0xFF	; 255
    3398:	fe 01       	movw	r30, r28
    339a:	e5 5a       	subi	r30, 0xA5	; 165
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	82 81       	ldd	r24, Z+2	; 0x02
    33a4:	93 81       	ldd	r25, Z+3	; 0x03
    33a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	f8 01       	movw	r30, r16
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	80 83       	st	Z, r24
    33b4:	de 01       	movw	r26, r28
    33b6:	ab 5a       	subi	r26, 0xAB	; 171
    33b8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ba:	fe 01       	movw	r30, r28
    33bc:	e7 5a       	subi	r30, 0xA7	; 167
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	8d 93       	st	X+, r24
    33c6:	9c 93       	st	X, r25
    33c8:	fe 01       	movw	r30, r28
    33ca:	eb 5a       	subi	r30, 0xAB	; 171
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	80 81       	ld	r24, Z
    33d0:	91 81       	ldd	r25, Z+1	; 0x01
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <LCD_displayCharacter+0x184>
    33d6:	fe 01       	movw	r30, r28
    33d8:	eb 5a       	subi	r30, 0xAB	; 171
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	61 e0       	ldi	r22, 0x01	; 1
    33e4:	41 e0       	ldi	r20, 0x01	; 1
    33e6:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    33ea:	fe 01       	movw	r30, r28
    33ec:	ef 5a       	subi	r30, 0xAF	; 175
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	a0 e8       	ldi	r26, 0x80	; 128
    33f6:	bf e3       	ldi	r27, 0x3F	; 63
    33f8:	80 83       	st	Z, r24
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	a2 83       	std	Z+2, r26	; 0x02
    33fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3400:	8e 01       	movw	r16, r28
    3402:	03 5b       	subi	r16, 0xB3	; 179
    3404:	1f 4f       	sbci	r17, 0xFF	; 255
    3406:	fe 01       	movw	r30, r28
    3408:	ef 5a       	subi	r30, 0xAF	; 175
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	60 81       	ld	r22, Z
    340e:	71 81       	ldd	r23, Z+1	; 0x01
    3410:	82 81       	ldd	r24, Z+2	; 0x02
    3412:	93 81       	ldd	r25, Z+3	; 0x03
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	4a ef       	ldi	r20, 0xFA	; 250
    341a:	54 e4       	ldi	r21, 0x44	; 68
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	f8 01       	movw	r30, r16
    3426:	80 83       	st	Z, r24
    3428:	91 83       	std	Z+1, r25	; 0x01
    342a:	a2 83       	std	Z+2, r26	; 0x02
    342c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    342e:	fe 01       	movw	r30, r28
    3430:	e3 5b       	subi	r30, 0xB3	; 179
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	60 81       	ld	r22, Z
    3436:	71 81       	ldd	r23, Z+1	; 0x01
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e8       	ldi	r20, 0x80	; 128
    3442:	5f e3       	ldi	r21, 0x3F	; 63
    3444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3448:	88 23       	and	r24, r24
    344a:	44 f4       	brge	.+16     	; 0x345c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    344c:	fe 01       	movw	r30, r28
    344e:	e5 5b       	subi	r30, 0xB5	; 181
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	91 83       	std	Z+1, r25	; 0x01
    3458:	80 83       	st	Z, r24
    345a:	64 c0       	rjmp	.+200    	; 0x3524 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    345c:	fe 01       	movw	r30, r28
    345e:	e3 5b       	subi	r30, 0xB3	; 179
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	60 81       	ld	r22, Z
    3464:	71 81       	ldd	r23, Z+1	; 0x01
    3466:	82 81       	ldd	r24, Z+2	; 0x02
    3468:	93 81       	ldd	r25, Z+3	; 0x03
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	3f ef       	ldi	r19, 0xFF	; 255
    346e:	4f e7       	ldi	r20, 0x7F	; 127
    3470:	57 e4       	ldi	r21, 0x47	; 71
    3472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3476:	18 16       	cp	r1, r24
    3478:	0c f0       	brlt	.+2      	; 0x347c <LCD_displayCharacter+0x22e>
    347a:	43 c0       	rjmp	.+134    	; 0x3502 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347c:	fe 01       	movw	r30, r28
    347e:	ef 5a       	subi	r30, 0xAF	; 175
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	93 81       	ldd	r25, Z+3	; 0x03
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e2       	ldi	r20, 0x20	; 32
    3490:	51 e4       	ldi	r21, 0x41	; 65
    3492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	8e 01       	movw	r16, r28
    349c:	05 5b       	subi	r16, 0xB5	; 181
    349e:	1f 4f       	sbci	r17, 0xFF	; 255
    34a0:	bc 01       	movw	r22, r24
    34a2:	cd 01       	movw	r24, r26
    34a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	f8 01       	movw	r30, r16
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	80 83       	st	Z, r24
    34b2:	1f c0       	rjmp	.+62     	; 0x34f2 <LCD_displayCharacter+0x2a4>
    34b4:	fe 01       	movw	r30, r28
    34b6:	e7 5b       	subi	r30, 0xB7	; 183
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	88 ec       	ldi	r24, 0xC8	; 200
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	91 83       	std	Z+1, r25	; 0x01
    34c0:	80 83       	st	Z, r24
    34c2:	fe 01       	movw	r30, r28
    34c4:	e7 5b       	subi	r30, 0xB7	; 183
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <LCD_displayCharacter+0x27e>
    34d0:	fe 01       	movw	r30, r28
    34d2:	e7 5b       	subi	r30, 0xB7	; 183
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34da:	de 01       	movw	r26, r28
    34dc:	a5 5b       	subi	r26, 0xB5	; 181
    34de:	bf 4f       	sbci	r27, 0xFF	; 255
    34e0:	fe 01       	movw	r30, r28
    34e2:	e5 5b       	subi	r30, 0xB5	; 181
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	80 81       	ld	r24, Z
    34e8:	91 81       	ldd	r25, Z+1	; 0x01
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	11 96       	adiw	r26, 0x01	; 1
    34ee:	9c 93       	st	X, r25
    34f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f2:	fe 01       	movw	r30, r28
    34f4:	e5 5b       	subi	r30, 0xB5	; 181
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 81       	ld	r24, Z
    34fa:	91 81       	ldd	r25, Z+1	; 0x01
    34fc:	00 97       	sbiw	r24, 0x00	; 0
    34fe:	d1 f6       	brne	.-76     	; 0x34b4 <LCD_displayCharacter+0x266>
    3500:	27 c0       	rjmp	.+78     	; 0x3550 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3502:	8e 01       	movw	r16, r28
    3504:	05 5b       	subi	r16, 0xB5	; 181
    3506:	1f 4f       	sbci	r17, 0xFF	; 255
    3508:	fe 01       	movw	r30, r28
    350a:	e3 5b       	subi	r30, 0xB3	; 179
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	60 81       	ld	r22, Z
    3510:	71 81       	ldd	r23, Z+1	; 0x01
    3512:	82 81       	ldd	r24, Z+2	; 0x02
    3514:	93 81       	ldd	r25, Z+3	; 0x03
    3516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	f8 01       	movw	r30, r16
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	80 83       	st	Z, r24
    3524:	de 01       	movw	r26, r28
    3526:	a9 5b       	subi	r26, 0xB9	; 185
    3528:	bf 4f       	sbci	r27, 0xFF	; 255
    352a:	fe 01       	movw	r30, r28
    352c:	e5 5b       	subi	r30, 0xB5	; 181
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	8d 93       	st	X+, r24
    3536:	9c 93       	st	X, r25
    3538:	fe 01       	movw	r30, r28
    353a:	e9 5b       	subi	r30, 0xB9	; 185
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	80 81       	ld	r24, Z
    3540:	91 81       	ldd	r25, Z+1	; 0x01
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <LCD_displayCharacter+0x2f4>
    3546:	fe 01       	movw	r30, r28
    3548:	e9 5b       	subi	r30, 0xB9	; 185
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	91 83       	std	Z+1, r25	; 0x01
    354e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3550:	fe 01       	movw	r30, r28
    3552:	ed 59       	subi	r30, 0x9D	; 157
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	80 81       	ld	r24, Z
    3558:	88 2f       	mov	r24, r24
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	80 71       	andi	r24, 0x10	; 16
    355e:	90 70       	andi	r25, 0x00	; 0
    3560:	95 95       	asr	r25
    3562:	87 95       	ror	r24
    3564:	95 95       	asr	r25
    3566:	87 95       	ror	r24
    3568:	95 95       	asr	r25
    356a:	87 95       	ror	r24
    356c:	95 95       	asr	r25
    356e:	87 95       	ror	r24
    3570:	98 2f       	mov	r25, r24
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	64 e0       	ldi	r22, 0x04	; 4
    3576:	49 2f       	mov	r20, r25
    3578:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    357c:	fe 01       	movw	r30, r28
    357e:	ed 59       	subi	r30, 0x9D	; 157
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	88 2f       	mov	r24, r24
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	80 72       	andi	r24, 0x20	; 32
    358a:	90 70       	andi	r25, 0x00	; 0
    358c:	95 95       	asr	r25
    358e:	87 95       	ror	r24
    3590:	95 95       	asr	r25
    3592:	87 95       	ror	r24
    3594:	95 95       	asr	r25
    3596:	87 95       	ror	r24
    3598:	95 95       	asr	r25
    359a:	87 95       	ror	r24
    359c:	95 95       	asr	r25
    359e:	87 95       	ror	r24
    35a0:	98 2f       	mov	r25, r24
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	65 e0       	ldi	r22, 0x05	; 5
    35a6:	49 2f       	mov	r20, r25
    35a8:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    35ac:	fe 01       	movw	r30, r28
    35ae:	ed 59       	subi	r30, 0x9D	; 157
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 81       	ld	r24, Z
    35b4:	88 2f       	mov	r24, r24
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	80 74       	andi	r24, 0x40	; 64
    35ba:	90 70       	andi	r25, 0x00	; 0
    35bc:	08 2e       	mov	r0, r24
    35be:	89 2f       	mov	r24, r25
    35c0:	00 0c       	add	r0, r0
    35c2:	88 1f       	adc	r24, r24
    35c4:	99 0b       	sbc	r25, r25
    35c6:	00 0c       	add	r0, r0
    35c8:	88 1f       	adc	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	98 2f       	mov	r25, r24
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	66 e0       	ldi	r22, 0x06	; 6
    35d2:	49 2f       	mov	r20, r25
    35d4:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    35d8:	fe 01       	movw	r30, r28
    35da:	ed 59       	subi	r30, 0x9D	; 157
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 81       	ld	r24, Z
    35e0:	98 2f       	mov	r25, r24
    35e2:	99 1f       	adc	r25, r25
    35e4:	99 27       	eor	r25, r25
    35e6:	99 1f       	adc	r25, r25
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	67 e0       	ldi	r22, 0x07	; 7
    35ec:	49 2f       	mov	r20, r25
    35ee:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    35f2:	fe 01       	movw	r30, r28
    35f4:	ed 5b       	subi	r30, 0xBD	; 189
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	a0 e8       	ldi	r26, 0x80	; 128
    35fe:	bf e3       	ldi	r27, 0x3F	; 63
    3600:	80 83       	st	Z, r24
    3602:	91 83       	std	Z+1, r25	; 0x01
    3604:	a2 83       	std	Z+2, r26	; 0x02
    3606:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3608:	8e 01       	movw	r16, r28
    360a:	01 5c       	subi	r16, 0xC1	; 193
    360c:	1f 4f       	sbci	r17, 0xFF	; 255
    360e:	fe 01       	movw	r30, r28
    3610:	ed 5b       	subi	r30, 0xBD	; 189
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	60 81       	ld	r22, Z
    3616:	71 81       	ldd	r23, Z+1	; 0x01
    3618:	82 81       	ldd	r24, Z+2	; 0x02
    361a:	93 81       	ldd	r25, Z+3	; 0x03
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	4a ef       	ldi	r20, 0xFA	; 250
    3622:	54 e4       	ldi	r21, 0x44	; 68
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	f8 01       	movw	r30, r16
    362e:	80 83       	st	Z, r24
    3630:	91 83       	std	Z+1, r25	; 0x01
    3632:	a2 83       	std	Z+2, r26	; 0x02
    3634:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3636:	fe 01       	movw	r30, r28
    3638:	ff 96       	adiw	r30, 0x3f	; 63
    363a:	60 81       	ld	r22, Z
    363c:	71 81       	ldd	r23, Z+1	; 0x01
    363e:	82 81       	ldd	r24, Z+2	; 0x02
    3640:	93 81       	ldd	r25, Z+3	; 0x03
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e8       	ldi	r20, 0x80	; 128
    3648:	5f e3       	ldi	r21, 0x3F	; 63
    364a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364e:	88 23       	and	r24, r24
    3650:	2c f4       	brge	.+10     	; 0x365c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	9e af       	std	Y+62, r25	; 0x3e
    3658:	8d af       	std	Y+61, r24	; 0x3d
    365a:	46 c0       	rjmp	.+140    	; 0x36e8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    365c:	fe 01       	movw	r30, r28
    365e:	ff 96       	adiw	r30, 0x3f	; 63
    3660:	60 81       	ld	r22, Z
    3662:	71 81       	ldd	r23, Z+1	; 0x01
    3664:	82 81       	ldd	r24, Z+2	; 0x02
    3666:	93 81       	ldd	r25, Z+3	; 0x03
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	3f ef       	ldi	r19, 0xFF	; 255
    366c:	4f e7       	ldi	r20, 0x7F	; 127
    366e:	57 e4       	ldi	r21, 0x47	; 71
    3670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3674:	18 16       	cp	r1, r24
    3676:	64 f5       	brge	.+88     	; 0x36d0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3678:	fe 01       	movw	r30, r28
    367a:	ed 5b       	subi	r30, 0xBD	; 189
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	60 81       	ld	r22, Z
    3680:	71 81       	ldd	r23, Z+1	; 0x01
    3682:	82 81       	ldd	r24, Z+2	; 0x02
    3684:	93 81       	ldd	r25, Z+3	; 0x03
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e2       	ldi	r20, 0x20	; 32
    368c:	51 e4       	ldi	r21, 0x41	; 65
    368e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	bc 01       	movw	r22, r24
    3698:	cd 01       	movw	r24, r26
    369a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369e:	dc 01       	movw	r26, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	9e af       	std	Y+62, r25	; 0x3e
    36a4:	8d af       	std	Y+61, r24	; 0x3d
    36a6:	0f c0       	rjmp	.+30     	; 0x36c6 <LCD_displayCharacter+0x478>
    36a8:	88 ec       	ldi	r24, 0xC8	; 200
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	9c af       	std	Y+60, r25	; 0x3c
    36ae:	8b af       	std	Y+59, r24	; 0x3b
    36b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    36b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	f1 f7       	brne	.-4      	; 0x36b4 <LCD_displayCharacter+0x466>
    36b8:	9c af       	std	Y+60, r25	; 0x3c
    36ba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    36be:	9e ad       	ldd	r25, Y+62	; 0x3e
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	9e af       	std	Y+62, r25	; 0x3e
    36c4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    36c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	69 f7       	brne	.-38     	; 0x36a8 <LCD_displayCharacter+0x45a>
    36ce:	16 c0       	rjmp	.+44     	; 0x36fc <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d0:	fe 01       	movw	r30, r28
    36d2:	ff 96       	adiw	r30, 0x3f	; 63
    36d4:	60 81       	ld	r22, Z
    36d6:	71 81       	ldd	r23, Z+1	; 0x01
    36d8:	82 81       	ldd	r24, Z+2	; 0x02
    36da:	93 81       	ldd	r25, Z+3	; 0x03
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e af       	std	Y+62, r25	; 0x3e
    36e6:	8d af       	std	Y+61, r24	; 0x3d
    36e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    36ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    36ec:	9a af       	std	Y+58, r25	; 0x3a
    36ee:	89 af       	std	Y+57, r24	; 0x39
    36f0:	89 ad       	ldd	r24, Y+57	; 0x39
    36f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <LCD_displayCharacter+0x4a6>
    36f8:	9a af       	std	Y+58, r25	; 0x3a
    36fa:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	61 e0       	ldi	r22, 0x01	; 1
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	a0 e8       	ldi	r26, 0x80	; 128
    370c:	bf e3       	ldi	r27, 0x3F	; 63
    370e:	8d ab       	std	Y+53, r24	; 0x35
    3710:	9e ab       	std	Y+54, r25	; 0x36
    3712:	af ab       	std	Y+55, r26	; 0x37
    3714:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3716:	6d a9       	ldd	r22, Y+53	; 0x35
    3718:	7e a9       	ldd	r23, Y+54	; 0x36
    371a:	8f a9       	ldd	r24, Y+55	; 0x37
    371c:	98 ad       	ldd	r25, Y+56	; 0x38
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	4a ef       	ldi	r20, 0xFA	; 250
    3724:	54 e4       	ldi	r21, 0x44	; 68
    3726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	89 ab       	std	Y+49, r24	; 0x31
    3730:	9a ab       	std	Y+50, r25	; 0x32
    3732:	ab ab       	std	Y+51, r26	; 0x33
    3734:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3736:	69 a9       	ldd	r22, Y+49	; 0x31
    3738:	7a a9       	ldd	r23, Y+50	; 0x32
    373a:	8b a9       	ldd	r24, Y+51	; 0x33
    373c:	9c a9       	ldd	r25, Y+52	; 0x34
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e8       	ldi	r20, 0x80	; 128
    3744:	5f e3       	ldi	r21, 0x3F	; 63
    3746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    374a:	88 23       	and	r24, r24
    374c:	2c f4       	brge	.+10     	; 0x3758 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	98 ab       	std	Y+48, r25	; 0x30
    3754:	8f a7       	std	Y+47, r24	; 0x2f
    3756:	3f c0       	rjmp	.+126    	; 0x37d6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3758:	69 a9       	ldd	r22, Y+49	; 0x31
    375a:	7a a9       	ldd	r23, Y+50	; 0x32
    375c:	8b a9       	ldd	r24, Y+51	; 0x33
    375e:	9c a9       	ldd	r25, Y+52	; 0x34
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	3f ef       	ldi	r19, 0xFF	; 255
    3764:	4f e7       	ldi	r20, 0x7F	; 127
    3766:	57 e4       	ldi	r21, 0x47	; 71
    3768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    376c:	18 16       	cp	r1, r24
    376e:	4c f5       	brge	.+82     	; 0x37c2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3770:	6d a9       	ldd	r22, Y+53	; 0x35
    3772:	7e a9       	ldd	r23, Y+54	; 0x36
    3774:	8f a9       	ldd	r24, Y+55	; 0x37
    3776:	98 ad       	ldd	r25, Y+56	; 0x38
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	40 e2       	ldi	r20, 0x20	; 32
    377e:	51 e4       	ldi	r21, 0x41	; 65
    3780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	bc 01       	movw	r22, r24
    378a:	cd 01       	movw	r24, r26
    378c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	98 ab       	std	Y+48, r25	; 0x30
    3796:	8f a7       	std	Y+47, r24	; 0x2f
    3798:	0f c0       	rjmp	.+30     	; 0x37b8 <LCD_displayCharacter+0x56a>
    379a:	88 ec       	ldi	r24, 0xC8	; 200
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	9e a7       	std	Y+46, r25	; 0x2e
    37a0:	8d a7       	std	Y+45, r24	; 0x2d
    37a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    37a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <LCD_displayCharacter+0x558>
    37aa:	9e a7       	std	Y+46, r25	; 0x2e
    37ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    37b0:	98 a9       	ldd	r25, Y+48	; 0x30
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	98 ab       	std	Y+48, r25	; 0x30
    37b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ba:	98 a9       	ldd	r25, Y+48	; 0x30
    37bc:	00 97       	sbiw	r24, 0x00	; 0
    37be:	69 f7       	brne	.-38     	; 0x379a <LCD_displayCharacter+0x54c>
    37c0:	14 c0       	rjmp	.+40     	; 0x37ea <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c2:	69 a9       	ldd	r22, Y+49	; 0x31
    37c4:	7a a9       	ldd	r23, Y+50	; 0x32
    37c6:	8b a9       	ldd	r24, Y+51	; 0x33
    37c8:	9c a9       	ldd	r25, Y+52	; 0x34
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	98 ab       	std	Y+48, r25	; 0x30
    37d4:	8f a7       	std	Y+47, r24	; 0x2f
    37d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37d8:	98 a9       	ldd	r25, Y+48	; 0x30
    37da:	9c a7       	std	Y+44, r25	; 0x2c
    37dc:	8b a7       	std	Y+43, r24	; 0x2b
    37de:	8b a5       	ldd	r24, Y+43	; 0x2b
    37e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <LCD_displayCharacter+0x594>
    37e6:	9c a7       	std	Y+44, r25	; 0x2c
    37e8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	61 e0       	ldi	r22, 0x01	; 1
    37ee:	41 e0       	ldi	r20, 0x01	; 1
    37f0:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	a0 e8       	ldi	r26, 0x80	; 128
    37fa:	bf e3       	ldi	r27, 0x3F	; 63
    37fc:	8f a3       	std	Y+39, r24	; 0x27
    37fe:	98 a7       	std	Y+40, r25	; 0x28
    3800:	a9 a7       	std	Y+41, r26	; 0x29
    3802:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3804:	6f a1       	ldd	r22, Y+39	; 0x27
    3806:	78 a5       	ldd	r23, Y+40	; 0x28
    3808:	89 a5       	ldd	r24, Y+41	; 0x29
    380a:	9a a5       	ldd	r25, Y+42	; 0x2a
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	4a ef       	ldi	r20, 0xFA	; 250
    3812:	54 e4       	ldi	r21, 0x44	; 68
    3814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3818:	dc 01       	movw	r26, r24
    381a:	cb 01       	movw	r24, r22
    381c:	8b a3       	std	Y+35, r24	; 0x23
    381e:	9c a3       	std	Y+36, r25	; 0x24
    3820:	ad a3       	std	Y+37, r26	; 0x25
    3822:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3824:	6b a1       	ldd	r22, Y+35	; 0x23
    3826:	7c a1       	ldd	r23, Y+36	; 0x24
    3828:	8d a1       	ldd	r24, Y+37	; 0x25
    382a:	9e a1       	ldd	r25, Y+38	; 0x26
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	40 e8       	ldi	r20, 0x80	; 128
    3832:	5f e3       	ldi	r21, 0x3F	; 63
    3834:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3838:	88 23       	and	r24, r24
    383a:	2c f4       	brge	.+10     	; 0x3846 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    383c:	81 e0       	ldi	r24, 0x01	; 1
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	9a a3       	std	Y+34, r25	; 0x22
    3842:	89 a3       	std	Y+33, r24	; 0x21
    3844:	3f c0       	rjmp	.+126    	; 0x38c4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3846:	6b a1       	ldd	r22, Y+35	; 0x23
    3848:	7c a1       	ldd	r23, Y+36	; 0x24
    384a:	8d a1       	ldd	r24, Y+37	; 0x25
    384c:	9e a1       	ldd	r25, Y+38	; 0x26
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	3f ef       	ldi	r19, 0xFF	; 255
    3852:	4f e7       	ldi	r20, 0x7F	; 127
    3854:	57 e4       	ldi	r21, 0x47	; 71
    3856:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    385a:	18 16       	cp	r1, r24
    385c:	4c f5       	brge	.+82     	; 0x38b0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    385e:	6f a1       	ldd	r22, Y+39	; 0x27
    3860:	78 a5       	ldd	r23, Y+40	; 0x28
    3862:	89 a5       	ldd	r24, Y+41	; 0x29
    3864:	9a a5       	ldd	r25, Y+42	; 0x2a
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	40 e2       	ldi	r20, 0x20	; 32
    386c:	51 e4       	ldi	r21, 0x41	; 65
    386e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	bc 01       	movw	r22, r24
    3878:	cd 01       	movw	r24, r26
    387a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	9a a3       	std	Y+34, r25	; 0x22
    3884:	89 a3       	std	Y+33, r24	; 0x21
    3886:	0f c0       	rjmp	.+30     	; 0x38a6 <LCD_displayCharacter+0x658>
    3888:	88 ec       	ldi	r24, 0xC8	; 200
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	98 a3       	std	Y+32, r25	; 0x20
    388e:	8f 8f       	std	Y+31, r24	; 0x1f
    3890:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3892:	98 a1       	ldd	r25, Y+32	; 0x20
    3894:	01 97       	sbiw	r24, 0x01	; 1
    3896:	f1 f7       	brne	.-4      	; 0x3894 <LCD_displayCharacter+0x646>
    3898:	98 a3       	std	Y+32, r25	; 0x20
    389a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389c:	89 a1       	ldd	r24, Y+33	; 0x21
    389e:	9a a1       	ldd	r25, Y+34	; 0x22
    38a0:	01 97       	sbiw	r24, 0x01	; 1
    38a2:	9a a3       	std	Y+34, r25	; 0x22
    38a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a6:	89 a1       	ldd	r24, Y+33	; 0x21
    38a8:	9a a1       	ldd	r25, Y+34	; 0x22
    38aa:	00 97       	sbiw	r24, 0x00	; 0
    38ac:	69 f7       	brne	.-38     	; 0x3888 <LCD_displayCharacter+0x63a>
    38ae:	14 c0       	rjmp	.+40     	; 0x38d8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b0:	6b a1       	ldd	r22, Y+35	; 0x23
    38b2:	7c a1       	ldd	r23, Y+36	; 0x24
    38b4:	8d a1       	ldd	r24, Y+37	; 0x25
    38b6:	9e a1       	ldd	r25, Y+38	; 0x26
    38b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	9a a3       	std	Y+34, r25	; 0x22
    38c2:	89 a3       	std	Y+33, r24	; 0x21
    38c4:	89 a1       	ldd	r24, Y+33	; 0x21
    38c6:	9a a1       	ldd	r25, Y+34	; 0x22
    38c8:	9e 8f       	std	Y+30, r25	; 0x1e
    38ca:	8d 8f       	std	Y+29, r24	; 0x1d
    38cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38d0:	01 97       	sbiw	r24, 0x01	; 1
    38d2:	f1 f7       	brne	.-4      	; 0x38d0 <LCD_displayCharacter+0x682>
    38d4:	9e 8f       	std	Y+30, r25	; 0x1e
    38d6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    38d8:	fe 01       	movw	r30, r28
    38da:	ed 59       	subi	r30, 0x9D	; 157
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	80 81       	ld	r24, Z
    38e0:	98 2f       	mov	r25, r24
    38e2:	91 70       	andi	r25, 0x01	; 1
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	64 e0       	ldi	r22, 0x04	; 4
    38e8:	49 2f       	mov	r20, r25
    38ea:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    38ee:	fe 01       	movw	r30, r28
    38f0:	ed 59       	subi	r30, 0x9D	; 157
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	80 81       	ld	r24, Z
    38f6:	88 2f       	mov	r24, r24
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	82 70       	andi	r24, 0x02	; 2
    38fc:	90 70       	andi	r25, 0x00	; 0
    38fe:	95 95       	asr	r25
    3900:	87 95       	ror	r24
    3902:	98 2f       	mov	r25, r24
    3904:	80 e0       	ldi	r24, 0x00	; 0
    3906:	65 e0       	ldi	r22, 0x05	; 5
    3908:	49 2f       	mov	r20, r25
    390a:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    390e:	fe 01       	movw	r30, r28
    3910:	ed 59       	subi	r30, 0x9D	; 157
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 81       	ld	r24, Z
    3916:	88 2f       	mov	r24, r24
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	84 70       	andi	r24, 0x04	; 4
    391c:	90 70       	andi	r25, 0x00	; 0
    391e:	95 95       	asr	r25
    3920:	87 95       	ror	r24
    3922:	95 95       	asr	r25
    3924:	87 95       	ror	r24
    3926:	98 2f       	mov	r25, r24
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	66 e0       	ldi	r22, 0x06	; 6
    392c:	49 2f       	mov	r20, r25
    392e:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3932:	fe 01       	movw	r30, r28
    3934:	ed 59       	subi	r30, 0x9D	; 157
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	80 81       	ld	r24, Z
    393a:	88 2f       	mov	r24, r24
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	88 70       	andi	r24, 0x08	; 8
    3940:	90 70       	andi	r25, 0x00	; 0
    3942:	95 95       	asr	r25
    3944:	87 95       	ror	r24
    3946:	95 95       	asr	r25
    3948:	87 95       	ror	r24
    394a:	95 95       	asr	r25
    394c:	87 95       	ror	r24
    394e:	98 2f       	mov	r25, r24
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	67 e0       	ldi	r22, 0x07	; 7
    3954:	49 2f       	mov	r20, r25
    3956:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	a0 e8       	ldi	r26, 0x80	; 128
    3960:	bf e3       	ldi	r27, 0x3F	; 63
    3962:	89 8f       	std	Y+25, r24	; 0x19
    3964:	9a 8f       	std	Y+26, r25	; 0x1a
    3966:	ab 8f       	std	Y+27, r26	; 0x1b
    3968:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    396a:	69 8d       	ldd	r22, Y+25	; 0x19
    396c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    396e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	4a ef       	ldi	r20, 0xFA	; 250
    3978:	54 e4       	ldi	r21, 0x44	; 68
    397a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	8d 8b       	std	Y+21, r24	; 0x15
    3984:	9e 8b       	std	Y+22, r25	; 0x16
    3986:	af 8b       	std	Y+23, r26	; 0x17
    3988:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    398a:	6d 89       	ldd	r22, Y+21	; 0x15
    398c:	7e 89       	ldd	r23, Y+22	; 0x16
    398e:	8f 89       	ldd	r24, Y+23	; 0x17
    3990:	98 8d       	ldd	r25, Y+24	; 0x18
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	40 e8       	ldi	r20, 0x80	; 128
    3998:	5f e3       	ldi	r21, 0x3F	; 63
    399a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    399e:	88 23       	and	r24, r24
    39a0:	2c f4       	brge	.+10     	; 0x39ac <LCD_displayCharacter+0x75e>
		__ticks = 1;
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	9c 8b       	std	Y+20, r25	; 0x14
    39a8:	8b 8b       	std	Y+19, r24	; 0x13
    39aa:	3f c0       	rjmp	.+126    	; 0x3a2a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    39ac:	6d 89       	ldd	r22, Y+21	; 0x15
    39ae:	7e 89       	ldd	r23, Y+22	; 0x16
    39b0:	8f 89       	ldd	r24, Y+23	; 0x17
    39b2:	98 8d       	ldd	r25, Y+24	; 0x18
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	3f ef       	ldi	r19, 0xFF	; 255
    39b8:	4f e7       	ldi	r20, 0x7F	; 127
    39ba:	57 e4       	ldi	r21, 0x47	; 71
    39bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39c0:	18 16       	cp	r1, r24
    39c2:	4c f5       	brge	.+82     	; 0x3a16 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c4:	69 8d       	ldd	r22, Y+25	; 0x19
    39c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e2       	ldi	r20, 0x20	; 32
    39d2:	51 e4       	ldi	r21, 0x41	; 65
    39d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	bc 01       	movw	r22, r24
    39de:	cd 01       	movw	r24, r26
    39e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	9c 8b       	std	Y+20, r25	; 0x14
    39ea:	8b 8b       	std	Y+19, r24	; 0x13
    39ec:	0f c0       	rjmp	.+30     	; 0x3a0c <LCD_displayCharacter+0x7be>
    39ee:	88 ec       	ldi	r24, 0xC8	; 200
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	9a 8b       	std	Y+18, r25	; 0x12
    39f4:	89 8b       	std	Y+17, r24	; 0x11
    39f6:	89 89       	ldd	r24, Y+17	; 0x11
    39f8:	9a 89       	ldd	r25, Y+18	; 0x12
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	f1 f7       	brne	.-4      	; 0x39fa <LCD_displayCharacter+0x7ac>
    39fe:	9a 8b       	std	Y+18, r25	; 0x12
    3a00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a02:	8b 89       	ldd	r24, Y+19	; 0x13
    3a04:	9c 89       	ldd	r25, Y+20	; 0x14
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	9c 8b       	std	Y+20, r25	; 0x14
    3a0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a10:	00 97       	sbiw	r24, 0x00	; 0
    3a12:	69 f7       	brne	.-38     	; 0x39ee <LCD_displayCharacter+0x7a0>
    3a14:	14 c0       	rjmp	.+40     	; 0x3a3e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a16:	6d 89       	ldd	r22, Y+21	; 0x15
    3a18:	7e 89       	ldd	r23, Y+22	; 0x16
    3a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	9c 8b       	std	Y+20, r25	; 0x14
    3a28:	8b 8b       	std	Y+19, r24	; 0x13
    3a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2e:	98 8b       	std	Y+16, r25	; 0x10
    3a30:	8f 87       	std	Y+15, r24	; 0x0f
    3a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a34:	98 89       	ldd	r25, Y+16	; 0x10
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	f1 f7       	brne	.-4      	; 0x3a36 <LCD_displayCharacter+0x7e8>
    3a3a:	98 8b       	std	Y+16, r25	; 0x10
    3a3c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	61 e0       	ldi	r22, 0x01	; 1
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	0e 94 5f 10 	call	0x20be	; 0x20be <GPIO_writePin>
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	a0 e8       	ldi	r26, 0x80	; 128
    3a4e:	bf e3       	ldi	r27, 0x3F	; 63
    3a50:	8b 87       	std	Y+11, r24	; 0x0b
    3a52:	9c 87       	std	Y+12, r25	; 0x0c
    3a54:	ad 87       	std	Y+13, r26	; 0x0d
    3a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	4a ef       	ldi	r20, 0xFA	; 250
    3a66:	54 e4       	ldi	r21, 0x44	; 68
    3a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	8f 83       	std	Y+7, r24	; 0x07
    3a72:	98 87       	std	Y+8, r25	; 0x08
    3a74:	a9 87       	std	Y+9, r26	; 0x09
    3a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a78:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7a:	78 85       	ldd	r23, Y+8	; 0x08
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	40 e8       	ldi	r20, 0x80	; 128
    3a86:	5f e3       	ldi	r21, 0x3F	; 63
    3a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a8c:	88 23       	and	r24, r24
    3a8e:	2c f4       	brge	.+10     	; 0x3a9a <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	9e 83       	std	Y+6, r25	; 0x06
    3a96:	8d 83       	std	Y+5, r24	; 0x05
    3a98:	3f c0       	rjmp	.+126    	; 0x3b18 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9c:	78 85       	ldd	r23, Y+8	; 0x08
    3a9e:	89 85       	ldd	r24, Y+9	; 0x09
    3aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	3f ef       	ldi	r19, 0xFF	; 255
    3aa6:	4f e7       	ldi	r20, 0x7F	; 127
    3aa8:	57 e4       	ldi	r21, 0x47	; 71
    3aaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aae:	18 16       	cp	r1, r24
    3ab0:	4c f5       	brge	.+82     	; 0x3b04 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	40 e2       	ldi	r20, 0x20	; 32
    3ac0:	51 e4       	ldi	r21, 0x41	; 65
    3ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	9e 83       	std	Y+6, r25	; 0x06
    3ad8:	8d 83       	std	Y+5, r24	; 0x05
    3ada:	0f c0       	rjmp	.+30     	; 0x3afa <LCD_displayCharacter+0x8ac>
    3adc:	88 ec       	ldi	r24, 0xC8	; 200
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	9c 83       	std	Y+4, r25	; 0x04
    3ae2:	8b 83       	std	Y+3, r24	; 0x03
    3ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <LCD_displayCharacter+0x89a>
    3aec:	9c 83       	std	Y+4, r25	; 0x04
    3aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af0:	8d 81       	ldd	r24, Y+5	; 0x05
    3af2:	9e 81       	ldd	r25, Y+6	; 0x06
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	9e 83       	std	Y+6, r25	; 0x06
    3af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afa:	8d 81       	ldd	r24, Y+5	; 0x05
    3afc:	9e 81       	ldd	r25, Y+6	; 0x06
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	69 f7       	brne	.-38     	; 0x3adc <LCD_displayCharacter+0x88e>
    3b02:	14 c0       	rjmp	.+40     	; 0x3b2c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b04:	6f 81       	ldd	r22, Y+7	; 0x07
    3b06:	78 85       	ldd	r23, Y+8	; 0x08
    3b08:	89 85       	ldd	r24, Y+9	; 0x09
    3b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	9e 83       	std	Y+6, r25	; 0x06
    3b16:	8d 83       	std	Y+5, r24	; 0x05
    3b18:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1c:	9a 83       	std	Y+2, r25	; 0x02
    3b1e:	89 83       	std	Y+1, r24	; 0x01
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	9a 81       	ldd	r25, Y+2	; 0x02
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	f1 f7       	brne	.-4      	; 0x3b24 <LCD_displayCharacter+0x8d6>
    3b28:	9a 83       	std	Y+2, r25	; 0x02
    3b2a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3b2c:	cd 59       	subi	r28, 0x9D	; 157
    3b2e:	df 4f       	sbci	r29, 0xFF	; 255
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	f8 94       	cli
    3b34:	de bf       	out	0x3e, r29	; 62
    3b36:	0f be       	out	0x3f, r0	; 63
    3b38:	cd bf       	out	0x3d, r28	; 61
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	08 95       	ret

00003b44 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	00 d0       	rcall	.+0      	; 0x3b4a <LCD_displayString+0x6>
    3b4a:	0f 92       	push	r0
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
    3b50:	9b 83       	std	Y+3, r25	; 0x03
    3b52:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b54:	19 82       	std	Y+1, r1	; 0x01
    3b56:	0e c0       	rjmp	.+28     	; 0x3b74 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	28 2f       	mov	r18, r24
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b60:	9b 81       	ldd	r25, Y+3	; 0x03
    3b62:	fc 01       	movw	r30, r24
    3b64:	e2 0f       	add	r30, r18
    3b66:	f3 1f       	adc	r31, r19
    3b68:	80 81       	ld	r24, Z
    3b6a:	0e 94 27 19 	call	0x324e	; 0x324e <LCD_displayCharacter>
		i++;
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	8f 5f       	subi	r24, 0xFF	; 255
    3b72:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	28 2f       	mov	r18, r24
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7e:	fc 01       	movw	r30, r24
    3b80:	e2 0f       	add	r30, r18
    3b82:	f3 1f       	adc	r31, r19
    3b84:	80 81       	ld	r24, Z
    3b86:	88 23       	and	r24, r24
    3b88:	39 f7       	brne	.-50     	; 0x3b58 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3b8a:	0f 90       	pop	r0
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	08 95       	ret

00003b96 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3b96:	df 93       	push	r29
    3b98:	cf 93       	push	r28
    3b9a:	00 d0       	rcall	.+0      	; 0x3b9c <LCD_moveCursor+0x6>
    3b9c:	00 d0       	rcall	.+0      	; 0x3b9e <LCD_moveCursor+0x8>
    3b9e:	0f 92       	push	r0
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
    3ba4:	8a 83       	std	Y+2, r24	; 0x02
    3ba6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    3baa:	28 2f       	mov	r18, r24
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	3d 83       	std	Y+5, r19	; 0x05
    3bb0:	2c 83       	std	Y+4, r18	; 0x04
    3bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb6:	81 30       	cpi	r24, 0x01	; 1
    3bb8:	91 05       	cpc	r25, r1
    3bba:	c1 f0       	breq	.+48     	; 0x3bec <LCD_moveCursor+0x56>
    3bbc:	2c 81       	ldd	r18, Y+4	; 0x04
    3bbe:	3d 81       	ldd	r19, Y+5	; 0x05
    3bc0:	22 30       	cpi	r18, 0x02	; 2
    3bc2:	31 05       	cpc	r19, r1
    3bc4:	2c f4       	brge	.+10     	; 0x3bd0 <LCD_moveCursor+0x3a>
    3bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	61 f0       	breq	.+24     	; 0x3be6 <LCD_moveCursor+0x50>
    3bce:	19 c0       	rjmp	.+50     	; 0x3c02 <LCD_moveCursor+0x6c>
    3bd0:	2c 81       	ldd	r18, Y+4	; 0x04
    3bd2:	3d 81       	ldd	r19, Y+5	; 0x05
    3bd4:	22 30       	cpi	r18, 0x02	; 2
    3bd6:	31 05       	cpc	r19, r1
    3bd8:	69 f0       	breq	.+26     	; 0x3bf4 <LCD_moveCursor+0x5e>
    3bda:	8c 81       	ldd	r24, Y+4	; 0x04
    3bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    3bde:	83 30       	cpi	r24, 0x03	; 3
    3be0:	91 05       	cpc	r25, r1
    3be2:	61 f0       	breq	.+24     	; 0x3bfc <LCD_moveCursor+0x66>
    3be4:	0e c0       	rjmp	.+28     	; 0x3c02 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3be6:	8b 81       	ldd	r24, Y+3	; 0x03
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	0b c0       	rjmp	.+22     	; 0x3c02 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3bec:	8b 81       	ldd	r24, Y+3	; 0x03
    3bee:	80 5c       	subi	r24, 0xC0	; 192
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	07 c0       	rjmp	.+14     	; 0x3c02 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf6:	80 5f       	subi	r24, 0xF0	; 240
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	03 c0       	rjmp	.+6      	; 0x3c02 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfe:	80 5b       	subi	r24, 0xB0	; 176
    3c00:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	80 68       	ori	r24, 0x80	; 128
    3c06:	0e 94 ac 14 	call	0x2958	; 0x2958 <LCD_sendCommand>
}
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	0f 90       	pop	r0
    3c14:	cf 91       	pop	r28
    3c16:	df 91       	pop	r29
    3c18:	08 95       	ret

00003c1a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3c1a:	df 93       	push	r29
    3c1c:	cf 93       	push	r28
    3c1e:	00 d0       	rcall	.+0      	; 0x3c20 <LCD_displayStringRowColumn+0x6>
    3c20:	00 d0       	rcall	.+0      	; 0x3c22 <LCD_displayStringRowColumn+0x8>
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	89 83       	std	Y+1, r24	; 0x01
    3c28:	6a 83       	std	Y+2, r22	; 0x02
    3c2a:	5c 83       	std	Y+4, r21	; 0x04
    3c2c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	6a 81       	ldd	r22, Y+2	; 0x02
    3c32:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
}
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
    3c46:	cf 91       	pop	r28
    3c48:	df 91       	pop	r29
    3c4a:	08 95       	ret

00003c4c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3c4c:	df 93       	push	r29
    3c4e:	cf 93       	push	r28
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    3c54:	62 97       	sbiw	r28, 0x12	; 18
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	9a 8b       	std	Y+18, r25	; 0x12
    3c62:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3c64:	89 89       	ldd	r24, Y+17	; 0x11
    3c66:	9a 89       	ldd	r25, Y+18	; 0x12
    3c68:	9e 01       	movw	r18, r28
    3c6a:	2f 5f       	subi	r18, 0xFF	; 255
    3c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6e:	b9 01       	movw	r22, r18
    3c70:	4a e0       	ldi	r20, 0x0A	; 10
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	0e 94 bf 1f 	call	0x3f7e	; 0x3f7e <itoa>
   LCD_displayString(buff); /* Display the string */
    3c78:	ce 01       	movw	r24, r28
    3c7a:	01 96       	adiw	r24, 0x01	; 1
    3c7c:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <LCD_displayString>
}
    3c80:	62 96       	adiw	r28, 0x12	; 18
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	f8 94       	cli
    3c86:	de bf       	out	0x3e, r29	; 62
    3c88:	0f be       	out	0x3f, r0	; 63
    3c8a:	cd bf       	out	0x3d, r28	; 61
    3c8c:	cf 91       	pop	r28
    3c8e:	df 91       	pop	r29
    3c90:	08 95       	ret

00003c92 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3c92:	df 93       	push	r29
    3c94:	cf 93       	push	r28
    3c96:	cd b7       	in	r28, 0x3d	; 61
    3c98:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	0e 94 ac 14 	call	0x2958	; 0x2958 <LCD_sendCommand>
}
    3ca0:	cf 91       	pop	r28
    3ca2:	df 91       	pop	r29
    3ca4:	08 95       	ret

00003ca6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3ca6:	df 93       	push	r29
    3ca8:	cf 93       	push	r28
    3caa:	00 d0       	rcall	.+0      	; 0x3cac <UART_init+0x6>
    3cac:	00 d0       	rcall	.+0      	; 0x3cae <UART_init+0x8>
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
    3cb2:	9c 83       	std	Y+4, r25	; 0x04
    3cb4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3cb6:	1a 82       	std	Y+2, r1	; 0x02
    3cb8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3cba:	eb e2       	ldi	r30, 0x2B	; 43
    3cbc:	f0 e0       	ldi	r31, 0x00	; 0
    3cbe:	82 e0       	ldi	r24, 0x02	; 2
    3cc0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3cc2:	ea e2       	ldi	r30, 0x2A	; 42
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	88 e1       	ldi	r24, 0x18	; 24
    3cc8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    3cca:	e0 e4       	ldi	r30, 0x40	; 64
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	86 e8       	ldi	r24, 0x86	; 134
    3cd0:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    3cd2:	a0 e4       	ldi	r26, 0x40	; 64
    3cd4:	b0 e0       	ldi	r27, 0x00	; 0
    3cd6:	e0 e4       	ldi	r30, 0x40	; 64
    3cd8:	f0 e0       	ldi	r31, 0x00	; 0
    3cda:	80 81       	ld	r24, Z
    3cdc:	28 2f       	mov	r18, r24
    3cde:	2f 7c       	andi	r18, 0xCF	; 207
    3ce0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ce2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ce4:	81 81       	ldd	r24, Z+1	; 0x01
    3ce6:	88 2f       	mov	r24, r24
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	82 95       	swap	r24
    3cec:	92 95       	swap	r25
    3cee:	90 7f       	andi	r25, 0xF0	; 240
    3cf0:	98 27       	eor	r25, r24
    3cf2:	80 7f       	andi	r24, 0xF0	; 240
    3cf4:	98 27       	eor	r25, r24
    3cf6:	82 2b       	or	r24, r18
    3cf8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    3cfa:	a0 e4       	ldi	r26, 0x40	; 64
    3cfc:	b0 e0       	ldi	r27, 0x00	; 0
    3cfe:	e0 e4       	ldi	r30, 0x40	; 64
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	80 81       	ld	r24, Z
    3d04:	28 2f       	mov	r18, r24
    3d06:	29 7f       	andi	r18, 0xF9	; 249
    3d08:	eb 81       	ldd	r30, Y+3	; 0x03
    3d0a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d0c:	80 81       	ld	r24, Z
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	88 0f       	add	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	82 2b       	or	r24, r18
    3d18:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    3d1a:	a0 e4       	ldi	r26, 0x40	; 64
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	e0 e4       	ldi	r30, 0x40	; 64
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	28 2f       	mov	r18, r24
    3d26:	27 7f       	andi	r18, 0xF7	; 247
    3d28:	eb 81       	ldd	r30, Y+3	; 0x03
    3d2a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d2c:	82 81       	ldd	r24, Z+2	; 0x02
    3d2e:	88 2f       	mov	r24, r24
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	88 0f       	add	r24, r24
    3d34:	99 1f       	adc	r25, r25
    3d36:	88 0f       	add	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	88 0f       	add	r24, r24
    3d3c:	99 1f       	adc	r25, r25
    3d3e:	82 2b       	or	r24, r18
    3d40:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3d42:	eb 81       	ldd	r30, Y+3	; 0x03
    3d44:	fc 81       	ldd	r31, Y+4	; 0x04
    3d46:	83 81       	ldd	r24, Z+3	; 0x03
    3d48:	94 81       	ldd	r25, Z+4	; 0x04
    3d4a:	a5 81       	ldd	r26, Z+5	; 0x05
    3d4c:	b6 81       	ldd	r27, Z+6	; 0x06
    3d4e:	88 0f       	add	r24, r24
    3d50:	99 1f       	adc	r25, r25
    3d52:	aa 1f       	adc	r26, r26
    3d54:	bb 1f       	adc	r27, r27
    3d56:	88 0f       	add	r24, r24
    3d58:	99 1f       	adc	r25, r25
    3d5a:	aa 1f       	adc	r26, r26
    3d5c:	bb 1f       	adc	r27, r27
    3d5e:	88 0f       	add	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	aa 1f       	adc	r26, r26
    3d64:	bb 1f       	adc	r27, r27
    3d66:	9c 01       	movw	r18, r24
    3d68:	ad 01       	movw	r20, r26
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	92 e1       	ldi	r25, 0x12	; 18
    3d6e:	aa e7       	ldi	r26, 0x7A	; 122
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	bc 01       	movw	r22, r24
    3d74:	cd 01       	movw	r24, r26
    3d76:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__udivmodsi4>
    3d7a:	da 01       	movw	r26, r20
    3d7c:	c9 01       	movw	r24, r18
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	9a 83       	std	Y+2, r25	; 0x02
    3d82:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3d84:	e0 e4       	ldi	r30, 0x40	; 64
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8c:	89 2f       	mov	r24, r25
    3d8e:	99 27       	eor	r25, r25
    3d90:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3d92:	e9 e2       	ldi	r30, 0x29	; 41
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	80 83       	st	Z, r24
}
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	08 95       	ret

00003da8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	0f 92       	push	r0
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3db4:	eb e2       	ldi	r30, 0x2B	; 43
    3db6:	f0 e0       	ldi	r31, 0x00	; 0
    3db8:	80 81       	ld	r24, Z
    3dba:	88 2f       	mov	r24, r24
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	80 72       	andi	r24, 0x20	; 32
    3dc0:	90 70       	andi	r25, 0x00	; 0
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	b9 f3       	breq	.-18     	; 0x3db4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3dc6:	ec e2       	ldi	r30, 0x2C	; 44
    3dc8:	f0 e0       	ldi	r31, 0x00	; 0
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3dce:	0f 90       	pop	r0
    3dd0:	cf 91       	pop	r28
    3dd2:	df 91       	pop	r29
    3dd4:	08 95       	ret

00003dd6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3dd6:	df 93       	push	r29
    3dd8:	cf 93       	push	r28
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3dde:	eb e2       	ldi	r30, 0x2B	; 43
    3de0:	f0 e0       	ldi	r31, 0x00	; 0
    3de2:	80 81       	ld	r24, Z
    3de4:	88 23       	and	r24, r24
    3de6:	dc f7       	brge	.-10     	; 0x3dde <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3de8:	ec e2       	ldi	r30, 0x2C	; 44
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	80 81       	ld	r24, Z
}
    3dee:	cf 91       	pop	r28
    3df0:	df 91       	pop	r29
    3df2:	08 95       	ret

00003df4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3df4:	df 93       	push	r29
    3df6:	cf 93       	push	r28
    3df8:	00 d0       	rcall	.+0      	; 0x3dfa <UART_sendString+0x6>
    3dfa:	0f 92       	push	r0
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
    3e00:	9b 83       	std	Y+3, r25	; 0x03
    3e02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3e04:	19 82       	std	Y+1, r1	; 0x01
    3e06:	0e c0       	rjmp	.+28     	; 0x3e24 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	28 2f       	mov	r18, r24
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e10:	9b 81       	ldd	r25, Y+3	; 0x03
    3e12:	fc 01       	movw	r30, r24
    3e14:	e2 0f       	add	r30, r18
    3e16:	f3 1f       	adc	r31, r19
    3e18:	80 81       	ld	r24, Z
    3e1a:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <UART_sendByte>
		i++;
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	8f 5f       	subi	r24, 0xFF	; 255
    3e22:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3e24:	89 81       	ldd	r24, Y+1	; 0x01
    3e26:	28 2f       	mov	r18, r24
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e2e:	fc 01       	movw	r30, r24
    3e30:	e2 0f       	add	r30, r18
    3e32:	f3 1f       	adc	r31, r19
    3e34:	80 81       	ld	r24, Z
    3e36:	88 23       	and	r24, r24
    3e38:	39 f7       	brne	.-50     	; 0x3e08 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	cf 91       	pop	r28
    3e42:	df 91       	pop	r29
    3e44:	08 95       	ret

00003e46 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3e46:	0f 93       	push	r16
    3e48:	1f 93       	push	r17
    3e4a:	df 93       	push	r29
    3e4c:	cf 93       	push	r28
    3e4e:	00 d0       	rcall	.+0      	; 0x3e50 <UART_receiveString+0xa>
    3e50:	0f 92       	push	r0
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	9b 83       	std	Y+3, r25	; 0x03
    3e58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3e5a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	28 2f       	mov	r18, r24
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	8a 81       	ldd	r24, Y+2	; 0x02
    3e64:	9b 81       	ldd	r25, Y+3	; 0x03
    3e66:	8c 01       	movw	r16, r24
    3e68:	02 0f       	add	r16, r18
    3e6a:	13 1f       	adc	r17, r19
    3e6c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <UART_recieveByte>
    3e70:	f8 01       	movw	r30, r16
    3e72:	80 83       	st	Z, r24
    3e74:	0f c0       	rjmp	.+30     	; 0x3e94 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	8f 5f       	subi	r24, 0xFF	; 255
    3e7a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	28 2f       	mov	r18, r24
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	8a 81       	ldd	r24, Y+2	; 0x02
    3e84:	9b 81       	ldd	r25, Y+3	; 0x03
    3e86:	8c 01       	movw	r16, r24
    3e88:	02 0f       	add	r16, r18
    3e8a:	13 1f       	adc	r17, r19
    3e8c:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <UART_recieveByte>
    3e90:	f8 01       	movw	r30, r16
    3e92:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	28 2f       	mov	r18, r24
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	e2 0f       	add	r30, r18
    3ea2:	f3 1f       	adc	r31, r19
    3ea4:	80 81       	ld	r24, Z
    3ea6:	83 32       	cpi	r24, 0x23	; 35
    3ea8:	31 f7       	brne	.-52     	; 0x3e76 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	28 2f       	mov	r18, r24
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	e2 0f       	add	r30, r18
    3eb8:	f3 1f       	adc	r31, r19
    3eba:	10 82       	st	Z, r1
}
    3ebc:	0f 90       	pop	r0
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	cf 91       	pop	r28
    3ec4:	df 91       	pop	r29
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	08 95       	ret

00003ecc <__udivmodsi4>:
    3ecc:	a1 e2       	ldi	r26, 0x21	; 33
    3ece:	1a 2e       	mov	r1, r26
    3ed0:	aa 1b       	sub	r26, r26
    3ed2:	bb 1b       	sub	r27, r27
    3ed4:	fd 01       	movw	r30, r26
    3ed6:	0d c0       	rjmp	.+26     	; 0x3ef2 <__udivmodsi4_ep>

00003ed8 <__udivmodsi4_loop>:
    3ed8:	aa 1f       	adc	r26, r26
    3eda:	bb 1f       	adc	r27, r27
    3edc:	ee 1f       	adc	r30, r30
    3ede:	ff 1f       	adc	r31, r31
    3ee0:	a2 17       	cp	r26, r18
    3ee2:	b3 07       	cpc	r27, r19
    3ee4:	e4 07       	cpc	r30, r20
    3ee6:	f5 07       	cpc	r31, r21
    3ee8:	20 f0       	brcs	.+8      	; 0x3ef2 <__udivmodsi4_ep>
    3eea:	a2 1b       	sub	r26, r18
    3eec:	b3 0b       	sbc	r27, r19
    3eee:	e4 0b       	sbc	r30, r20
    3ef0:	f5 0b       	sbc	r31, r21

00003ef2 <__udivmodsi4_ep>:
    3ef2:	66 1f       	adc	r22, r22
    3ef4:	77 1f       	adc	r23, r23
    3ef6:	88 1f       	adc	r24, r24
    3ef8:	99 1f       	adc	r25, r25
    3efa:	1a 94       	dec	r1
    3efc:	69 f7       	brne	.-38     	; 0x3ed8 <__udivmodsi4_loop>
    3efe:	60 95       	com	r22
    3f00:	70 95       	com	r23
    3f02:	80 95       	com	r24
    3f04:	90 95       	com	r25
    3f06:	9b 01       	movw	r18, r22
    3f08:	ac 01       	movw	r20, r24
    3f0a:	bd 01       	movw	r22, r26
    3f0c:	cf 01       	movw	r24, r30
    3f0e:	08 95       	ret

00003f10 <__prologue_saves__>:
    3f10:	2f 92       	push	r2
    3f12:	3f 92       	push	r3
    3f14:	4f 92       	push	r4
    3f16:	5f 92       	push	r5
    3f18:	6f 92       	push	r6
    3f1a:	7f 92       	push	r7
    3f1c:	8f 92       	push	r8
    3f1e:	9f 92       	push	r9
    3f20:	af 92       	push	r10
    3f22:	bf 92       	push	r11
    3f24:	cf 92       	push	r12
    3f26:	df 92       	push	r13
    3f28:	ef 92       	push	r14
    3f2a:	ff 92       	push	r15
    3f2c:	0f 93       	push	r16
    3f2e:	1f 93       	push	r17
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
    3f38:	ca 1b       	sub	r28, r26
    3f3a:	db 0b       	sbc	r29, r27
    3f3c:	0f b6       	in	r0, 0x3f	; 63
    3f3e:	f8 94       	cli
    3f40:	de bf       	out	0x3e, r29	; 62
    3f42:	0f be       	out	0x3f, r0	; 63
    3f44:	cd bf       	out	0x3d, r28	; 61
    3f46:	09 94       	ijmp

00003f48 <__epilogue_restores__>:
    3f48:	2a 88       	ldd	r2, Y+18	; 0x12
    3f4a:	39 88       	ldd	r3, Y+17	; 0x11
    3f4c:	48 88       	ldd	r4, Y+16	; 0x10
    3f4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f50:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f52:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f54:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f56:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f58:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f5a:	b9 84       	ldd	r11, Y+9	; 0x09
    3f5c:	c8 84       	ldd	r12, Y+8	; 0x08
    3f5e:	df 80       	ldd	r13, Y+7	; 0x07
    3f60:	ee 80       	ldd	r14, Y+6	; 0x06
    3f62:	fd 80       	ldd	r15, Y+5	; 0x05
    3f64:	0c 81       	ldd	r16, Y+4	; 0x04
    3f66:	1b 81       	ldd	r17, Y+3	; 0x03
    3f68:	aa 81       	ldd	r26, Y+2	; 0x02
    3f6a:	b9 81       	ldd	r27, Y+1	; 0x01
    3f6c:	ce 0f       	add	r28, r30
    3f6e:	d1 1d       	adc	r29, r1
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	de bf       	out	0x3e, r29	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	cd bf       	out	0x3d, r28	; 61
    3f7a:	ed 01       	movw	r28, r26
    3f7c:	08 95       	ret

00003f7e <itoa>:
    3f7e:	fb 01       	movw	r30, r22
    3f80:	9f 01       	movw	r18, r30
    3f82:	e8 94       	clt
    3f84:	42 30       	cpi	r20, 0x02	; 2
    3f86:	c4 f0       	brlt	.+48     	; 0x3fb8 <itoa+0x3a>
    3f88:	45 32       	cpi	r20, 0x25	; 37
    3f8a:	b4 f4       	brge	.+44     	; 0x3fb8 <itoa+0x3a>
    3f8c:	4a 30       	cpi	r20, 0x0A	; 10
    3f8e:	29 f4       	brne	.+10     	; 0x3f9a <itoa+0x1c>
    3f90:	97 fb       	bst	r25, 7
    3f92:	1e f4       	brtc	.+6      	; 0x3f9a <itoa+0x1c>
    3f94:	90 95       	com	r25
    3f96:	81 95       	neg	r24
    3f98:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9a:	64 2f       	mov	r22, r20
    3f9c:	77 27       	eor	r23, r23
    3f9e:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__udivmodhi4>
    3fa2:	80 5d       	subi	r24, 0xD0	; 208
    3fa4:	8a 33       	cpi	r24, 0x3A	; 58
    3fa6:	0c f0       	brlt	.+2      	; 0x3faa <itoa+0x2c>
    3fa8:	89 5d       	subi	r24, 0xD9	; 217
    3faa:	81 93       	st	Z+, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	00 97       	sbiw	r24, 0x00	; 0
    3fb0:	a1 f7       	brne	.-24     	; 0x3f9a <itoa+0x1c>
    3fb2:	16 f4       	brtc	.+4      	; 0x3fb8 <itoa+0x3a>
    3fb4:	5d e2       	ldi	r21, 0x2D	; 45
    3fb6:	51 93       	st	Z+, r21
    3fb8:	10 82       	st	Z, r1
    3fba:	c9 01       	movw	r24, r18
    3fbc:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <strrev>

00003fc0 <strrev>:
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	67 2f       	mov	r22, r23
    3fc6:	71 91       	ld	r23, Z+
    3fc8:	77 23       	and	r23, r23
    3fca:	e1 f7       	brne	.-8      	; 0x3fc4 <strrev+0x4>
    3fcc:	32 97       	sbiw	r30, 0x02	; 2
    3fce:	04 c0       	rjmp	.+8      	; 0x3fd8 <strrev+0x18>
    3fd0:	7c 91       	ld	r23, X
    3fd2:	6d 93       	st	X+, r22
    3fd4:	70 83       	st	Z, r23
    3fd6:	62 91       	ld	r22, -Z
    3fd8:	ae 17       	cp	r26, r30
    3fda:	bf 07       	cpc	r27, r31
    3fdc:	c8 f3       	brcs	.-14     	; 0x3fd0 <strrev+0x10>
    3fde:	08 95       	ret

00003fe0 <__udivmodhi4>:
    3fe0:	aa 1b       	sub	r26, r26
    3fe2:	bb 1b       	sub	r27, r27
    3fe4:	51 e1       	ldi	r21, 0x11	; 17
    3fe6:	07 c0       	rjmp	.+14     	; 0x3ff6 <__udivmodhi4_ep>

00003fe8 <__udivmodhi4_loop>:
    3fe8:	aa 1f       	adc	r26, r26
    3fea:	bb 1f       	adc	r27, r27
    3fec:	a6 17       	cp	r26, r22
    3fee:	b7 07       	cpc	r27, r23
    3ff0:	10 f0       	brcs	.+4      	; 0x3ff6 <__udivmodhi4_ep>
    3ff2:	a6 1b       	sub	r26, r22
    3ff4:	b7 0b       	sbc	r27, r23

00003ff6 <__udivmodhi4_ep>:
    3ff6:	88 1f       	adc	r24, r24
    3ff8:	99 1f       	adc	r25, r25
    3ffa:	5a 95       	dec	r21
    3ffc:	a9 f7       	brne	.-22     	; 0x3fe8 <__udivmodhi4_loop>
    3ffe:	80 95       	com	r24
    4000:	90 95       	com	r25
    4002:	bc 01       	movw	r22, r24
    4004:	cd 01       	movw	r24, r26
    4006:	08 95       	ret

00004008 <_exit>:
    4008:	f8 94       	cli

0000400a <__stop_program>:
    400a:	ff cf       	rjmp	.-2      	; 0x400a <__stop_program>
